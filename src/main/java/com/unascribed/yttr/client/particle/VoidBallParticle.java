package com.unascribed.yttr.client.particle;

import com.mojang.blaze3d.platform.GlStateManager.DestFactor;
import com.mojang.blaze3d.platform.GlStateManager.SourceFactor;
import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.BufferBuilder;
import com.mojang.blaze3d.vertex.Tessellator;
import com.mojang.blaze3d.vertex.VertexBuffer;
import com.mojang.blaze3d.vertex.VertexConsumer;
import com.mojang.blaze3d.vertex.VertexFormat.DrawMode;
import com.mojang.blaze3d.vertex.VertexFormats;
import com.unascribed.yttr.Yttr;

import net.minecraft.client.MinecraftClient;
import net.minecraft.client.particle.BillboardParticle;
import net.minecraft.client.particle.ParticleTextureSheet;
import net.minecraft.client.render.Camera;
import net.minecraft.client.render.GameRenderer;
import net.minecraft.client.render.ShaderProgram;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;

public class VoidBallParticle extends BillboardParticle {
	
	private static final Identifier TEXTURE = Yttr.id("textures/particle/void_ball.png");
	
	private static VertexBuffer buf;
	
	public VoidBallParticle(ClientWorld world, double x, double y, double z, float r) {
		super(world, x, y, z);
		this.scale = r;
		maxAge = 40;
	}
	
	@Override
	public void buildGeometry(VertexConsumer vertexConsumer, Camera camera, float tickDelta) {
		float age = this.age+tickDelta;
		RenderSystem.enableBlend();
		RenderSystem.blendFuncSeparate(SourceFactor.SRC_ALPHA, DestFactor.ONE_MINUS_SRC_ALPHA, SourceFactor.ONE, DestFactor.ONE_MINUS_SRC_ALPHA);
		if (!MinecraftClient.isFancyGraphicsOrBetter()) {
			if (buf != null) {
				buf.close();
				buf = null;
			}
			RenderSystem.setShaderTexture(0, TEXTURE);
			Tessellator.getInstance().getBufferBuilder().begin(DrawMode.QUADS, VertexFormats.POSITION_TEXTURE_COLOR_LIGHT);
			setColorAlpha(age < 10 ? 1 : 1-((age-10)/(maxAge-10)));
			super.buildGeometry(vertexConsumer, camera, tickDelta);
			Tessellator.getInstance().draw();
			return;
		}
		if (buf == null) {
			buf = new VertexBuffer(VertexBuffer.Usage.STATIC);
			BufferBuilder bb = Tessellator.getInstance().getBufferBuilder();
			
			bb.begin(DrawMode.TRIANGLES, VertexFormats.POSITION);
			emitSubdividedSphere(bb);
			buf.bind();
			buf.upload(bb.end());
		}
		
		Vec3d cam = camera.getPos();
		float ox = (float)(MathHelper.lerp(tickDelta, prevPosX, x) - cam.getX());
		float oy = (float)(MathHelper.lerp(tickDelta, prevPosY, y) - cam.getY());
		float oz = (float)(MathHelper.lerp(tickDelta, prevPosZ, z) - cam.getZ());
		MatrixStack ms = RenderSystem.getModelViewStack();
		ms.push();
		ShaderProgram old = RenderSystem.getShader();
		RenderSystem.setShader(GameRenderer::getPositionShader);
		float a = age < 10 ? 1 : 1-((age-10)/(maxAge-10));
		RenderSystem.setShaderColor(0, 0, 0, a);
		ms.translate(ox, oy, oz);
		ms.scale(scale-0.5f, scale-0.5f, scale-0.5f);
		RenderSystem.depthMask(false);
		RenderSystem.disableCull();
		
		int cutoff = 0;
		if (a < 0.1) {
			cutoff = (int)(((.1-a)/.1)*30);
		}
		
		buf.bind();
		for (int i = 0; i < 40; i++) {
			if (i >= cutoff) {
				buf.draw(ms.peek().getModel(), RenderSystem.getProjectionMatrix(), GameRenderer.getPositionShader());
			}
			ms.scale(0.97f, 0.97f, 0.97f);
			RenderSystem.setShaderColor(0, 0, 0, a/3);
		}
		
		VertexBuffer.unbind();
		ms.pop();
		RenderSystem.setShader(() -> old);
		RenderSystem.depthMask(true);
	}
	


	@Override
	protected float getMinU() {
		return 0;
	}

	@Override
	protected float getMaxU() {
		return 1;
	}

	@Override
	protected float getMinV() {
		return 0;
	}

	@Override
	protected float getMaxV() {
		return 1;
	}

	@Override
	public ParticleTextureSheet getType() {
		return ParticleTextureSheet.CUSTOM;
	}

	// generated by par_shapes
	private static void emitSubdividedSphere(BufferBuilder bb) {
		bb.vertex(0.638041f, 0.263068f, 0.723670f).next();
		bb.vertex(0.446927f, 0.526051f, 0.723552f).next();
		bb.vertex(0.361615f, 0.263021f, 0.894457f).next();
		bb.vertex(0.525605f, 0.000000f, 0.850729f).next();
		bb.vertex(0.638041f, 0.263068f, 0.723670f).next();
		bb.vertex(0.361615f, 0.263021f, 0.894457f).next();
		bb.vertex(0.638041f, 0.263068f, 0.723670f).next();
		bb.vertex(0.687957f, 0.500386f, 0.525670f).next();
		bb.vertex(0.446927f, 0.526051f, 0.723552f).next();
		bb.vertex(0.361615f, 0.263021f, 0.894457f).next();
		bb.vertex(0.446927f, 0.526051f, 0.723552f).next();
		bb.vertex(0.162235f, 0.500226f, 0.850561f).next();
		bb.vertex(0.251050f, 0.000000f, 0.967974f).next();
		bb.vertex(0.361615f, 0.263021f, 0.894457f).next();
		bb.vertex(0.077502f, 0.238964f, 0.967931f).next();
		bb.vertex(-0.000000f, 0.000000f, 1.000000f).next();
		bb.vertex(0.251050f, 0.000000f, 0.967974f).next();
		bb.vertex(0.077502f, 0.238964f, 0.967931f).next();
		bb.vertex(0.251050f, 0.000000f, 0.967974f).next();
		bb.vertex(0.525605f, 0.000000f, 0.850729f).next();
		bb.vertex(0.361615f, 0.263021f, 0.894457f).next();
		bb.vertex(0.077502f, 0.238964f, 0.967931f).next();
		bb.vertex(0.361615f, 0.263021f, 0.894457f).next();
		bb.vertex(0.162235f, 0.500226f, 0.850561f).next();
		bb.vertex(0.753376f, 0.000000f, 0.657589f).next();
		bb.vertex(0.830987f, 0.239070f, 0.502301f).next();
		bb.vertex(0.638041f, 0.263068f, 0.723670f).next();
		bb.vertex(0.525605f, 0.000000f, 0.850729f).next();
		bb.vertex(0.753376f, 0.000000f, 0.657589f).next();
		bb.vertex(0.638041f, 0.263068f, 0.723670f).next();
		bb.vertex(0.753376f, 0.000000f, 0.657589f).next();
		bb.vertex(0.894427f, 0.000000f, 0.447214f).next();
		bb.vertex(0.830987f, 0.239070f, 0.502301f).next();
		bb.vertex(0.638041f, 0.263068f, 0.723670f).next();
		bb.vertex(0.830987f, 0.239070f, 0.502301f).next();
		bb.vertex(0.687957f, 0.500386f, 0.525670f).next();
		bb.vertex(0.446927f, 0.526051f, 0.723552f).next();
		bb.vertex(0.483585f, 0.716953f, 0.502120f).next();
		bb.vertex(0.232492f, 0.716850f, 0.657323f).next();
		bb.vertex(0.162235f, 0.500226f, 0.850561f).next();
		bb.vertex(0.446927f, 0.526051f, 0.723552f).next();
		bb.vertex(0.232492f, 0.716850f, 0.657323f).next();
		bb.vertex(0.446927f, 0.526051f, 0.723552f).next();
		bb.vertex(0.687957f, 0.500386f, 0.525670f).next();
		bb.vertex(0.483585f, 0.716953f, 0.502120f).next();
		bb.vertex(0.232492f, 0.716850f, 0.657323f).next();
		bb.vertex(0.483585f, 0.716953f, 0.502120f).next();
		bb.vertex(0.275974f, 0.850921f, 0.446958f).next();
		bb.vertex(-0.053147f, 0.688434f, 0.723350f).next();
		bb.vertex(-0.362114f, 0.587971f, 0.723301f).next();
		bb.vertex(-0.138440f, 0.425518f, 0.894298f).next();
		bb.vertex(0.162235f, 0.500226f, 0.850561f).next();
		bb.vertex(-0.053147f, 0.688434f, 0.723350f).next();
		bb.vertex(-0.138440f, 0.425518f, 0.894298f).next();
		bb.vertex(-0.053147f, 0.688434f, 0.723350f).next();
		bb.vertex(-0.263253f, 0.809151f, 0.525331f).next();
		bb.vertex(-0.362114f, 0.587971f, 0.723301f).next();
		bb.vertex(-0.138440f, 0.425518f, 0.894298f).next();
		bb.vertex(-0.362114f, 0.587971f, 0.723301f).next();
		bb.vertex(-0.425539f, 0.309163f, 0.850491f).next();
		bb.vertex(0.077502f, 0.238964f, 0.967931f).next();
		bb.vertex(-0.138440f, 0.425518f, 0.894298f).next();
		bb.vertex(-0.203298f, 0.147700f, 0.967912f).next();
		bb.vertex(-0.000000f, 0.000000f, 1.000000f).next();
		bb.vertex(0.077502f, 0.238964f, 0.967931f).next();
		bb.vertex(-0.203298f, 0.147700f, 0.967912f).next();
		bb.vertex(0.077502f, 0.238964f, 0.967931f).next();
		bb.vertex(0.162235f, 0.500226f, 0.850561f).next();
		bb.vertex(-0.138440f, 0.425518f, 0.894298f).next();
		bb.vertex(-0.203298f, 0.147700f, 0.967912f).next();
		bb.vertex(-0.138440f, 0.425518f, 0.894298f).next();
		bb.vertex(-0.425539f, 0.309163f, 0.850491f).next();
		bb.vertex(0.232492f, 0.716850f, 0.657323f).next();
		bb.vertex(0.029197f, 0.864397f, 0.501962f).next();
		bb.vertex(-0.053147f, 0.688434f, 0.723350f).next();
		bb.vertex(0.162235f, 0.500226f, 0.850561f).next();
		bb.vertex(0.232492f, 0.716850f, 0.657323f).next();
		bb.vertex(-0.053147f, 0.688434f, 0.723350f).next();
		bb.vertex(0.232492f, 0.716850f, 0.657323f).next();
		bb.vertex(0.275974f, 0.850921f, 0.446958f).next();
		bb.vertex(0.029197f, 0.864397f, 0.501962f).next();
		bb.vertex(-0.053147f, 0.688434f, 0.723350f).next();
		bb.vertex(0.029197f, 0.864397f, 0.501962f).next();
		bb.vertex(-0.263253f, 0.809151f, 0.525331f).next();
		bb.vertex(-0.362114f, 0.587971f, 0.723301f).next();
		bb.vertex(-0.532202f, 0.681814f, 0.501887f).next();
		bb.vertex(-0.609767f, 0.443008f, 0.657212f).next();
		bb.vertex(-0.425539f, 0.309163f, 0.850491f).next();
		bb.vertex(-0.362114f, 0.587971f, 0.723301f).next();
		bb.vertex(-0.609767f, 0.443008f, 0.657212f).next();
		bb.vertex(-0.362114f, 0.587971f, 0.723301f).next();
		bb.vertex(-0.263253f, 0.809151f, 0.525331f).next();
		bb.vertex(-0.532202f, 0.681814f, 0.501887f).next();
		bb.vertex(-0.609767f, 0.443008f, 0.657212f).next();
		bb.vertex(-0.532202f, 0.681814f, 0.501887f).next();
		bb.vertex(-0.723761f, 0.525826f, 0.446852f).next();
		bb.vertex(-0.671108f, 0.162524f, 0.723326f).next();
		bb.vertex(-0.671108f, -0.162524f, 0.723326f).next();
		bb.vertex(-0.447461f, 0.000000f, 0.894304f).next();
		bb.vertex(-0.425539f, 0.309163f, 0.850491f).next();
		bb.vertex(-0.671108f, 0.162524f, 0.723326f).next();
		bb.vertex(-0.447461f, 0.000000f, 0.894304f).next();
		bb.vertex(-0.671108f, 0.162524f, 0.723326f).next();
		bb.vertex(-0.850891f, 0.000000f, 0.525343f).next();
		bb.vertex(-0.671108f, -0.162524f, 0.723326f).next();
		bb.vertex(-0.447461f, 0.000000f, 0.894304f).next();
		bb.vertex(-0.671108f, -0.162524f, 0.723326f).next();
		bb.vertex(-0.425539f, -0.309163f, 0.850491f).next();
		bb.vertex(-0.203298f, 0.147700f, 0.967912f).next();
		bb.vertex(-0.447461f, 0.000000f, 0.894304f).next();
		bb.vertex(-0.203298f, -0.147700f, 0.967912f).next();
		bb.vertex(-0.000000f, 0.000000f, 1.000000f).next();
		bb.vertex(-0.203298f, 0.147700f, 0.967912f).next();
		bb.vertex(-0.203298f, -0.147700f, 0.967912f).next();
		bb.vertex(-0.203298f, 0.147700f, 0.967912f).next();
		bb.vertex(-0.425539f, 0.309163f, 0.850491f).next();
		bb.vertex(-0.447461f, 0.000000f, 0.894304f).next();
		bb.vertex(-0.203298f, -0.147700f, 0.967912f).next();
		bb.vertex(-0.447461f, 0.000000f, 0.894304f).next();
		bb.vertex(-0.425539f, -0.309163f, 0.850491f).next();
		bb.vertex(-0.609767f, 0.443008f, 0.657212f).next();
		bb.vertex(-0.812942f, 0.295309f, 0.501913f).next();
		bb.vertex(-0.671108f, 0.162524f, 0.723326f).next();
		bb.vertex(-0.425539f, 0.309163f, 0.850491f).next();
		bb.vertex(-0.609767f, 0.443008f, 0.657212f).next();
		bb.vertex(-0.671108f, 0.162524f, 0.723326f).next();
		bb.vertex(-0.609767f, 0.443008f, 0.657212f).next();
		bb.vertex(-0.723761f, 0.525826f, 0.446852f).next();
		bb.vertex(-0.812942f, 0.295309f, 0.501913f).next();
		bb.vertex(-0.671108f, 0.162524f, 0.723326f).next();
		bb.vertex(-0.812942f, 0.295309f, 0.501913f).next();
		bb.vertex(-0.850891f, 0.000000f, 0.525343f).next();
		bb.vertex(-0.671108f, -0.162524f, 0.723326f).next();
		bb.vertex(-0.812942f, -0.295309f, 0.501913f).next();
		bb.vertex(-0.609767f, -0.443008f, 0.657212f).next();
		bb.vertex(-0.425539f, -0.309163f, 0.850491f).next();
		bb.vertex(-0.671108f, -0.162524f, 0.723326f).next();
		bb.vertex(-0.609767f, -0.443008f, 0.657212f).next();
		bb.vertex(-0.671108f, -0.162524f, 0.723326f).next();
		bb.vertex(-0.850891f, 0.000000f, 0.525343f).next();
		bb.vertex(-0.812942f, -0.295309f, 0.501913f).next();
		bb.vertex(-0.609767f, -0.443008f, 0.657212f).next();
		bb.vertex(-0.812942f, -0.295309f, 0.501913f).next();
		bb.vertex(-0.723761f, -0.525826f, 0.446852f).next();
		bb.vertex(-0.362114f, -0.587971f, 0.723301f).next();
		bb.vertex(-0.053147f, -0.688434f, 0.723350f).next();
		bb.vertex(-0.138440f, -0.425518f, 0.894298f).next();
		bb.vertex(-0.425539f, -0.309163f, 0.850491f).next();
		bb.vertex(-0.362114f, -0.587971f, 0.723301f).next();
		bb.vertex(-0.138440f, -0.425518f, 0.894298f).next();
		bb.vertex(-0.362114f, -0.587971f, 0.723301f).next();
		bb.vertex(-0.263253f, -0.809151f, 0.525331f).next();
		bb.vertex(-0.053147f, -0.688434f, 0.723350f).next();
		bb.vertex(-0.138440f, -0.425518f, 0.894298f).next();
		bb.vertex(-0.053147f, -0.688434f, 0.723350f).next();
		bb.vertex(0.162235f, -0.500226f, 0.850561f).next();
		bb.vertex(-0.203298f, -0.147700f, 0.967912f).next();
		bb.vertex(-0.138440f, -0.425518f, 0.894298f).next();
		bb.vertex(0.077502f, -0.238964f, 0.967931f).next();
		bb.vertex(-0.000000f, 0.000000f, 1.000000f).next();
		bb.vertex(-0.203298f, -0.147700f, 0.967912f).next();
		bb.vertex(0.077502f, -0.238964f, 0.967931f).next();
		bb.vertex(-0.203298f, -0.147700f, 0.967912f).next();
		bb.vertex(-0.425539f, -0.309163f, 0.850491f).next();
		bb.vertex(-0.138440f, -0.425518f, 0.894298f).next();
		bb.vertex(0.077502f, -0.238964f, 0.967931f).next();
		bb.vertex(-0.138440f, -0.425518f, 0.894298f).next();
		bb.vertex(0.162235f, -0.500226f, 0.850561f).next();
		bb.vertex(-0.609767f, -0.443008f, 0.657212f).next();
		bb.vertex(-0.532202f, -0.681814f, 0.501887f).next();
		bb.vertex(-0.362114f, -0.587971f, 0.723301f).next();
		bb.vertex(-0.425539f, -0.309163f, 0.850491f).next();
		bb.vertex(-0.609767f, -0.443008f, 0.657212f).next();
		bb.vertex(-0.362114f, -0.587971f, 0.723301f).next();
		bb.vertex(-0.609767f, -0.443008f, 0.657212f).next();
		bb.vertex(-0.723761f, -0.525826f, 0.446852f).next();
		bb.vertex(-0.532202f, -0.681814f, 0.501887f).next();
		bb.vertex(-0.362114f, -0.587971f, 0.723301f).next();
		bb.vertex(-0.532202f, -0.681814f, 0.501887f).next();
		bb.vertex(-0.263253f, -0.809151f, 0.525331f).next();
		bb.vertex(-0.053147f, -0.688434f, 0.723350f).next();
		bb.vertex(0.029197f, -0.864397f, 0.501962f).next();
		bb.vertex(0.232492f, -0.716850f, 0.657323f).next();
		bb.vertex(0.162235f, -0.500226f, 0.850561f).next();
		bb.vertex(-0.053147f, -0.688434f, 0.723350f).next();
		bb.vertex(0.232492f, -0.716850f, 0.657323f).next();
		bb.vertex(-0.053147f, -0.688434f, 0.723350f).next();
		bb.vertex(-0.263253f, -0.809151f, 0.525331f).next();
		bb.vertex(0.029197f, -0.864397f, 0.501962f).next();
		bb.vertex(0.232492f, -0.716850f, 0.657323f).next();
		bb.vertex(0.029197f, -0.864397f, 0.501962f).next();
		bb.vertex(0.275974f, -0.850921f, 0.446958f).next();
		bb.vertex(0.446927f, -0.526051f, 0.723552f).next();
		bb.vertex(0.638041f, -0.263068f, 0.723670f).next();
		bb.vertex(0.361615f, -0.263021f, 0.894457f).next();
		bb.vertex(0.162235f, -0.500226f, 0.850561f).next();
		bb.vertex(0.446927f, -0.526051f, 0.723552f).next();
		bb.vertex(0.361615f, -0.263021f, 0.894457f).next();
		bb.vertex(0.446927f, -0.526051f, 0.723552f).next();
		bb.vertex(0.687957f, -0.500386f, 0.525670f).next();
		bb.vertex(0.638041f, -0.263068f, 0.723670f).next();
		bb.vertex(0.361615f, -0.263021f, 0.894457f).next();
		bb.vertex(0.638041f, -0.263068f, 0.723670f).next();
		bb.vertex(0.525605f, 0.000000f, 0.850729f).next();
		bb.vertex(0.077502f, -0.238964f, 0.967931f).next();
		bb.vertex(0.361615f, -0.263021f, 0.894457f).next();
		bb.vertex(0.251050f, 0.000000f, 0.967974f).next();
		bb.vertex(-0.000000f, 0.000000f, 1.000000f).next();
		bb.vertex(0.077502f, -0.238964f, 0.967931f).next();
		bb.vertex(0.251050f, 0.000000f, 0.967974f).next();
		bb.vertex(0.077502f, -0.238964f, 0.967931f).next();
		bb.vertex(0.162235f, -0.500226f, 0.850561f).next();
		bb.vertex(0.361615f, -0.263021f, 0.894457f).next();
		bb.vertex(0.251050f, 0.000000f, 0.967974f).next();
		bb.vertex(0.361615f, -0.263021f, 0.894457f).next();
		bb.vertex(0.525605f, 0.000000f, 0.850729f).next();
		bb.vertex(0.232492f, -0.716850f, 0.657323f).next();
		bb.vertex(0.483585f, -0.716953f, 0.502120f).next();
		bb.vertex(0.446927f, -0.526051f, 0.723552f).next();
		bb.vertex(0.162235f, -0.500226f, 0.850561f).next();
		bb.vertex(0.232492f, -0.716850f, 0.657323f).next();
		bb.vertex(0.446927f, -0.526051f, 0.723552f).next();
		bb.vertex(0.232492f, -0.716850f, 0.657323f).next();
		bb.vertex(0.275974f, -0.850921f, 0.446958f).next();
		bb.vertex(0.483585f, -0.716953f, 0.502120f).next();
		bb.vertex(0.446927f, -0.526051f, 0.723552f).next();
		bb.vertex(0.483585f, -0.716953f, 0.502120f).next();
		bb.vertex(0.687957f, -0.500386f, 0.525670f).next();
		bb.vertex(0.638041f, -0.263068f, 0.723670f).next();
		bb.vertex(0.830987f, -0.239070f, 0.502301f).next();
		bb.vertex(0.753376f, 0.000000f, 0.657589f).next();
		bb.vertex(0.525605f, 0.000000f, 0.850729f).next();
		bb.vertex(0.638041f, -0.263068f, 0.723670f).next();
		bb.vertex(0.753376f, 0.000000f, 0.657589f).next();
		bb.vertex(0.638041f, -0.263068f, 0.723670f).next();
		bb.vertex(0.687957f, -0.500386f, 0.525670f).next();
		bb.vertex(0.830987f, -0.239070f, 0.502301f).next();
		bb.vertex(0.753376f, 0.000000f, 0.657589f).next();
		bb.vertex(0.830987f, -0.239070f, 0.502301f).next();
		bb.vertex(0.894427f, 0.000000f, 0.447214f).next();
		bb.vertex(0.362114f, 0.587971f, -0.723300f).next();
		bb.vertex(0.138440f, 0.425518f, -0.894298f).next();
		bb.vertex(0.053146f, 0.688434f, -0.723350f).next();
		bb.vertex(0.263253f, 0.809151f, -0.525331f).next();
		bb.vertex(0.362114f, 0.587971f, -0.723300f).next();
		bb.vertex(0.053146f, 0.688434f, -0.723350f).next();
		bb.vertex(0.362114f, 0.587971f, -0.723300f).next();
		bb.vertex(0.425539f, 0.309163f, -0.850491f).next();
		bb.vertex(0.138440f, 0.425518f, -0.894298f).next();
		bb.vertex(0.053146f, 0.688434f, -0.723350f).next();
		bb.vertex(0.138440f, 0.425518f, -0.894298f).next();
		bb.vertex(-0.162235f, 0.500226f, -0.850561f).next();
		bb.vertex(-0.029197f, 0.864397f, -0.501962f).next();
		bb.vertex(0.053146f, 0.688434f, -0.723350f).next();
		bb.vertex(-0.232492f, 0.716850f, -0.657323f).next();
		bb.vertex(-0.275974f, 0.850921f, -0.446958f).next();
		bb.vertex(-0.029197f, 0.864397f, -0.501962f).next();
		bb.vertex(-0.232492f, 0.716850f, -0.657323f).next();
		bb.vertex(-0.029197f, 0.864397f, -0.501962f).next();
		bb.vertex(0.263253f, 0.809151f, -0.525331f).next();
		bb.vertex(0.053146f, 0.688434f, -0.723350f).next();
		bb.vertex(-0.232492f, 0.716850f, -0.657323f).next();
		bb.vertex(0.053146f, 0.688434f, -0.723350f).next();
		bb.vertex(-0.162235f, 0.500226f, -0.850561f).next();
		bb.vertex(0.532202f, 0.681814f, -0.501887f).next();
		bb.vertex(0.609767f, 0.443008f, -0.657212f).next();
		bb.vertex(0.362114f, 0.587971f, -0.723300f).next();
		bb.vertex(0.263253f, 0.809151f, -0.525331f).next();
		bb.vertex(0.532202f, 0.681814f, -0.501887f).next();
		bb.vertex(0.362114f, 0.587971f, -0.723300f).next();
		bb.vertex(0.532202f, 0.681814f, -0.501887f).next();
		bb.vertex(0.723761f, 0.525826f, -0.446852f).next();
		bb.vertex(0.609767f, 0.443008f, -0.657212f).next();
		bb.vertex(0.362114f, 0.587971f, -0.723300f).next();
		bb.vertex(0.609767f, 0.443008f, -0.657212f).next();
		bb.vertex(0.425539f, 0.309163f, -0.850491f).next();
		bb.vertex(0.138440f, 0.425518f, -0.894298f).next();
		bb.vertex(0.203298f, 0.147700f, -0.967912f).next();
		bb.vertex(-0.077502f, 0.238964f, -0.967931f).next();
		bb.vertex(-0.162235f, 0.500226f, -0.850561f).next();
		bb.vertex(0.138440f, 0.425518f, -0.894298f).next();
		bb.vertex(-0.077502f, 0.238964f, -0.967931f).next();
		bb.vertex(0.138440f, 0.425518f, -0.894298f).next();
		bb.vertex(0.425539f, 0.309163f, -0.850491f).next();
		bb.vertex(0.203298f, 0.147700f, -0.967912f).next();
		bb.vertex(-0.077502f, 0.238964f, -0.967931f).next();
		bb.vertex(0.203298f, 0.147700f, -0.967912f).next();
		bb.vertex(-0.000000f, 0.000000f, -1.000000f).next();
		bb.vertex(-0.446927f, 0.526051f, -0.723552f).next();
		bb.vertex(-0.361615f, 0.263021f, -0.894457f).next();
		bb.vertex(-0.638041f, 0.263068f, -0.723670f).next();
		bb.vertex(-0.687957f, 0.500386f, -0.525670f).next();
		bb.vertex(-0.446927f, 0.526051f, -0.723552f).next();
		bb.vertex(-0.638041f, 0.263068f, -0.723670f).next();
		bb.vertex(-0.446927f, 0.526051f, -0.723552f).next();
		bb.vertex(-0.162235f, 0.500226f, -0.850561f).next();
		bb.vertex(-0.361615f, 0.263021f, -0.894457f).next();
		bb.vertex(-0.638041f, 0.263068f, -0.723670f).next();
		bb.vertex(-0.361615f, 0.263021f, -0.894457f).next();
		bb.vertex(-0.525605f, 0.000000f, -0.850728f).next();
		bb.vertex(-0.830987f, 0.239070f, -0.502301f).next();
		bb.vertex(-0.638041f, 0.263068f, -0.723670f).next();
		bb.vertex(-0.753377f, 0.000000f, -0.657589f).next();
		bb.vertex(-0.894427f, 0.000000f, -0.447214f).next();
		bb.vertex(-0.830987f, 0.239070f, -0.502301f).next();
		bb.vertex(-0.753377f, 0.000000f, -0.657589f).next();
		bb.vertex(-0.830987f, 0.239070f, -0.502301f).next();
		bb.vertex(-0.687957f, 0.500386f, -0.525670f).next();
		bb.vertex(-0.638041f, 0.263068f, -0.723670f).next();
		bb.vertex(-0.753377f, 0.000000f, -0.657589f).next();
		bb.vertex(-0.638041f, 0.263068f, -0.723670f).next();
		bb.vertex(-0.525605f, 0.000000f, -0.850728f).next();
		bb.vertex(-0.483585f, 0.716953f, -0.502120f).next();
		bb.vertex(-0.232492f, 0.716850f, -0.657323f).next();
		bb.vertex(-0.446927f, 0.526051f, -0.723552f).next();
		bb.vertex(-0.687957f, 0.500386f, -0.525670f).next();
		bb.vertex(-0.483585f, 0.716953f, -0.502120f).next();
		bb.vertex(-0.446927f, 0.526051f, -0.723552f).next();
		bb.vertex(-0.483585f, 0.716953f, -0.502120f).next();
		bb.vertex(-0.275974f, 0.850921f, -0.446958f).next();
		bb.vertex(-0.232492f, 0.716850f, -0.657323f).next();
		bb.vertex(-0.446927f, 0.526051f, -0.723552f).next();
		bb.vertex(-0.232492f, 0.716850f, -0.657323f).next();
		bb.vertex(-0.162235f, 0.500226f, -0.850561f).next();
		bb.vertex(-0.361615f, 0.263021f, -0.894457f).next();
		bb.vertex(-0.077502f, 0.238964f, -0.967931f).next();
		bb.vertex(-0.251050f, 0.000000f, -0.967974f).next();
		bb.vertex(-0.525605f, 0.000000f, -0.850728f).next();
		bb.vertex(-0.361615f, 0.263021f, -0.894457f).next();
		bb.vertex(-0.251050f, 0.000000f, -0.967974f).next();
		bb.vertex(-0.361615f, 0.263021f, -0.894457f).next();
		bb.vertex(-0.162235f, 0.500226f, -0.850561f).next();
		bb.vertex(-0.077502f, 0.238964f, -0.967931f).next();
		bb.vertex(-0.251050f, 0.000000f, -0.967974f).next();
		bb.vertex(-0.077502f, 0.238964f, -0.967931f).next();
		bb.vertex(-0.000000f, 0.000000f, -1.000000f).next();
		bb.vertex(-0.638041f, -0.263068f, -0.723670f).next();
		bb.vertex(-0.361615f, -0.263021f, -0.894457f).next();
		bb.vertex(-0.446927f, -0.526051f, -0.723552f).next();
		bb.vertex(-0.687957f, -0.500386f, -0.525670f).next();
		bb.vertex(-0.638041f, -0.263068f, -0.723670f).next();
		bb.vertex(-0.446927f, -0.526051f, -0.723552f).next();
		bb.vertex(-0.638041f, -0.263068f, -0.723670f).next();
		bb.vertex(-0.525605f, 0.000000f, -0.850728f).next();
		bb.vertex(-0.361615f, -0.263021f, -0.894457f).next();
		bb.vertex(-0.446927f, -0.526051f, -0.723552f).next();
		bb.vertex(-0.361615f, -0.263021f, -0.894457f).next();
		bb.vertex(-0.162235f, -0.500226f, -0.850561f).next();
		bb.vertex(-0.483585f, -0.716953f, -0.502120f).next();
		bb.vertex(-0.446927f, -0.526051f, -0.723552f).next();
		bb.vertex(-0.232492f, -0.716850f, -0.657323f).next();
		bb.vertex(-0.275974f, -0.850921f, -0.446958f).next();
		bb.vertex(-0.483585f, -0.716953f, -0.502120f).next();
		bb.vertex(-0.232492f, -0.716850f, -0.657323f).next();
		bb.vertex(-0.483585f, -0.716953f, -0.502120f).next();
		bb.vertex(-0.687957f, -0.500386f, -0.525670f).next();
		bb.vertex(-0.446927f, -0.526051f, -0.723552f).next();
		bb.vertex(-0.232492f, -0.716850f, -0.657323f).next();
		bb.vertex(-0.446927f, -0.526051f, -0.723552f).next();
		bb.vertex(-0.162235f, -0.500226f, -0.850561f).next();
		bb.vertex(-0.830987f, -0.239070f, -0.502301f).next();
		bb.vertex(-0.753377f, 0.000000f, -0.657589f).next();
		bb.vertex(-0.638041f, -0.263068f, -0.723670f).next();
		bb.vertex(-0.687957f, -0.500386f, -0.525670f).next();
		bb.vertex(-0.830987f, -0.239070f, -0.502301f).next();
		bb.vertex(-0.638041f, -0.263068f, -0.723670f).next();
		bb.vertex(-0.830987f, -0.239070f, -0.502301f).next();
		bb.vertex(-0.894427f, 0.000000f, -0.447214f).next();
		bb.vertex(-0.753377f, 0.000000f, -0.657589f).next();
		bb.vertex(-0.638041f, -0.263068f, -0.723670f).next();
		bb.vertex(-0.753377f, 0.000000f, -0.657589f).next();
		bb.vertex(-0.525605f, 0.000000f, -0.850728f).next();
		bb.vertex(-0.361615f, -0.263021f, -0.894457f).next();
		bb.vertex(-0.251050f, 0.000000f, -0.967974f).next();
		bb.vertex(-0.077502f, -0.238964f, -0.967931f).next();
		bb.vertex(-0.162235f, -0.500226f, -0.850561f).next();
		bb.vertex(-0.361615f, -0.263021f, -0.894457f).next();
		bb.vertex(-0.077502f, -0.238964f, -0.967931f).next();
		bb.vertex(-0.361615f, -0.263021f, -0.894457f).next();
		bb.vertex(-0.525605f, 0.000000f, -0.850728f).next();
		bb.vertex(-0.251050f, 0.000000f, -0.967974f).next();
		bb.vertex(-0.077502f, -0.238964f, -0.967931f).next();
		bb.vertex(-0.251050f, 0.000000f, -0.967974f).next();
		bb.vertex(-0.000000f, 0.000000f, -1.000000f).next();
		bb.vertex(0.053146f, -0.688434f, -0.723350f).next();
		bb.vertex(0.138440f, -0.425518f, -0.894298f).next();
		bb.vertex(0.362114f, -0.587971f, -0.723300f).next();
		bb.vertex(0.263253f, -0.809151f, -0.525331f).next();
		bb.vertex(0.053146f, -0.688434f, -0.723350f).next();
		bb.vertex(0.362114f, -0.587971f, -0.723300f).next();
		bb.vertex(0.053146f, -0.688434f, -0.723350f).next();
		bb.vertex(-0.162235f, -0.500226f, -0.850561f).next();
		bb.vertex(0.138440f, -0.425518f, -0.894298f).next();
		bb.vertex(0.362114f, -0.587971f, -0.723300f).next();
		bb.vertex(0.138440f, -0.425518f, -0.894298f).next();
		bb.vertex(0.425539f, -0.309163f, -0.850491f).next();
		bb.vertex(0.532202f, -0.681814f, -0.501887f).next();
		bb.vertex(0.362114f, -0.587971f, -0.723300f).next();
		bb.vertex(0.609767f, -0.443008f, -0.657212f).next();
		bb.vertex(0.723761f, -0.525826f, -0.446852f).next();
		bb.vertex(0.532202f, -0.681814f, -0.501887f).next();
		bb.vertex(0.609767f, -0.443008f, -0.657212f).next();
		bb.vertex(0.532202f, -0.681814f, -0.501887f).next();
		bb.vertex(0.263253f, -0.809151f, -0.525331f).next();
		bb.vertex(0.362114f, -0.587971f, -0.723300f).next();
		bb.vertex(0.609767f, -0.443008f, -0.657212f).next();
		bb.vertex(0.362114f, -0.587971f, -0.723300f).next();
		bb.vertex(0.425539f, -0.309163f, -0.850491f).next();
		bb.vertex(-0.029197f, -0.864397f, -0.501962f).next();
		bb.vertex(-0.232492f, -0.716850f, -0.657323f).next();
		bb.vertex(0.053146f, -0.688434f, -0.723350f).next();
		bb.vertex(0.263253f, -0.809151f, -0.525331f).next();
		bb.vertex(-0.029197f, -0.864397f, -0.501962f).next();
		bb.vertex(0.053146f, -0.688434f, -0.723350f).next();
		bb.vertex(-0.029197f, -0.864397f, -0.501962f).next();
		bb.vertex(-0.275974f, -0.850921f, -0.446958f).next();
		bb.vertex(-0.232492f, -0.716850f, -0.657323f).next();
		bb.vertex(0.053146f, -0.688434f, -0.723350f).next();
		bb.vertex(-0.232492f, -0.716850f, -0.657323f).next();
		bb.vertex(-0.162235f, -0.500226f, -0.850561f).next();
		bb.vertex(0.138440f, -0.425518f, -0.894298f).next();
		bb.vertex(-0.077502f, -0.238964f, -0.967931f).next();
		bb.vertex(0.203298f, -0.147700f, -0.967912f).next();
		bb.vertex(0.425539f, -0.309163f, -0.850491f).next();
		bb.vertex(0.138440f, -0.425518f, -0.894298f).next();
		bb.vertex(0.203298f, -0.147700f, -0.967912f).next();
		bb.vertex(0.138440f, -0.425518f, -0.894298f).next();
		bb.vertex(-0.162235f, -0.500226f, -0.850561f).next();
		bb.vertex(-0.077502f, -0.238964f, -0.967931f).next();
		bb.vertex(0.203298f, -0.147700f, -0.967912f).next();
		bb.vertex(-0.077502f, -0.238964f, -0.967931f).next();
		bb.vertex(-0.000000f, 0.000000f, -1.000000f).next();
		bb.vertex(0.671108f, -0.162524f, -0.723326f).next();
		bb.vertex(0.447461f, 0.000000f, -0.894304f).next();
		bb.vertex(0.671108f, 0.162524f, -0.723326f).next();
		bb.vertex(0.850891f, 0.000000f, -0.525343f).next();
		bb.vertex(0.671108f, -0.162524f, -0.723326f).next();
		bb.vertex(0.671108f, 0.162524f, -0.723326f).next();
		bb.vertex(0.671108f, -0.162524f, -0.723326f).next();
		bb.vertex(0.425539f, -0.309163f, -0.850491f).next();
		bb.vertex(0.447461f, 0.000000f, -0.894304f).next();
		bb.vertex(0.671108f, 0.162524f, -0.723326f).next();
		bb.vertex(0.447461f, 0.000000f, -0.894304f).next();
		bb.vertex(0.425539f, 0.309163f, -0.850491f).next();
		bb.vertex(0.812942f, 0.295309f, -0.501913f).next();
		bb.vertex(0.671108f, 0.162524f, -0.723326f).next();
		bb.vertex(0.609767f, 0.443008f, -0.657212f).next();
		bb.vertex(0.723761f, 0.525826f, -0.446852f).next();
		bb.vertex(0.812942f, 0.295309f, -0.501913f).next();
		bb.vertex(0.609767f, 0.443008f, -0.657212f).next();
		bb.vertex(0.812942f, 0.295309f, -0.501913f).next();
		bb.vertex(0.850891f, 0.000000f, -0.525343f).next();
		bb.vertex(0.671108f, 0.162524f, -0.723326f).next();
		bb.vertex(0.609767f, 0.443008f, -0.657212f).next();
		bb.vertex(0.671108f, 0.162524f, -0.723326f).next();
		bb.vertex(0.425539f, 0.309163f, -0.850491f).next();
		bb.vertex(0.812942f, -0.295309f, -0.501913f).next();
		bb.vertex(0.609767f, -0.443008f, -0.657212f).next();
		bb.vertex(0.671108f, -0.162524f, -0.723326f).next();
		bb.vertex(0.850891f, 0.000000f, -0.525343f).next();
		bb.vertex(0.812942f, -0.295309f, -0.501913f).next();
		bb.vertex(0.671108f, -0.162524f, -0.723326f).next();
		bb.vertex(0.812942f, -0.295309f, -0.501913f).next();
		bb.vertex(0.723761f, -0.525826f, -0.446852f).next();
		bb.vertex(0.609767f, -0.443008f, -0.657212f).next();
		bb.vertex(0.671108f, -0.162524f, -0.723326f).next();
		bb.vertex(0.609767f, -0.443008f, -0.657212f).next();
		bb.vertex(0.425539f, -0.309163f, -0.850491f).next();
		bb.vertex(0.447461f, 0.000000f, -0.894304f).next();
		bb.vertex(0.203298f, -0.147700f, -0.967912f).next();
		bb.vertex(0.203298f, 0.147700f, -0.967912f).next();
		bb.vertex(0.425539f, 0.309163f, -0.850491f).next();
		bb.vertex(0.447461f, 0.000000f, -0.894304f).next();
		bb.vertex(0.203298f, 0.147700f, -0.967912f).next();
		bb.vertex(0.447461f, 0.000000f, -0.894304f).next();
		bb.vertex(0.425539f, -0.309163f, -0.850491f).next();
		bb.vertex(0.203298f, -0.147700f, -0.967912f).next();
		bb.vertex(0.203298f, 0.147700f, -0.967912f).next();
		bb.vertex(0.203298f, -0.147700f, -0.967912f).next();
		bb.vertex(-0.000000f, 0.000000f, -1.000000f).next();
		bb.vertex(0.670567f, 0.688490f, 0.276261f).next();
		bb.vertex(0.861697f, 0.425594f, 0.276312f).next();
		bb.vertex(0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(0.587612f, 0.809142f, 0.000000f).next();
		bb.vertex(0.670567f, 0.688490f, 0.276261f).next();
		bb.vertex(0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(0.670567f, 0.688490f, 0.276261f).next();
		bb.vertex(0.687957f, 0.500386f, 0.525670f).next();
		bb.vertex(0.861697f, 0.425594f, 0.276312f).next();
		bb.vertex(0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(0.861697f, 0.425594f, 0.276312f).next();
		bb.vertex(0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(0.687142f, 0.681809f, -0.250942f).next();
		bb.vertex(0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(0.860690f, 0.442978f, -0.250964f).next();
		bb.vertex(0.723761f, 0.525826f, -0.446852f).next();
		bb.vertex(0.687142f, 0.681809f, -0.250942f).next();
		bb.vertex(0.860690f, 0.442978f, -0.250964f).next();
		bb.vertex(0.687142f, 0.681809f, -0.250942f).next();
		bb.vertex(0.587612f, 0.809142f, 0.000000f).next();
		bb.vertex(0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(0.860690f, 0.442978f, -0.250964f).next();
		bb.vertex(0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(0.435704f, 0.864390f, 0.250979f).next();
		bb.vertex(0.483585f, 0.716953f, 0.502120f).next();
		bb.vertex(0.670567f, 0.688490f, 0.276261f).next();
		bb.vertex(0.587612f, 0.809142f, 0.000000f).next();
		bb.vertex(0.435704f, 0.864390f, 0.250979f).next();
		bb.vertex(0.670567f, 0.688490f, 0.276261f).next();
		bb.vertex(0.435704f, 0.864390f, 0.250979f).next();
		bb.vertex(0.275974f, 0.850921f, 0.446958f).next();
		bb.vertex(0.483585f, 0.716953f, 0.502120f).next();
		bb.vertex(0.670567f, 0.688490f, 0.276261f).next();
		bb.vertex(0.483585f, 0.716953f, 0.502120f).next();
		bb.vertex(0.687957f, 0.500386f, 0.525670f).next();
		bb.vertex(0.861697f, 0.425594f, 0.276312f).next();
		bb.vertex(0.830987f, 0.239070f, 0.502301f).next();
		bb.vertex(0.956623f, 0.147734f, 0.251092f).next();
		bb.vertex(0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(0.861697f, 0.425594f, 0.276312f).next();
		bb.vertex(0.956623f, 0.147734f, 0.251092f).next();
		bb.vertex(0.861697f, 0.425594f, 0.276312f).next();
		bb.vertex(0.687957f, 0.500386f, 0.525670f).next();
		bb.vertex(0.830987f, 0.239070f, 0.502301f).next();
		bb.vertex(0.956623f, 0.147734f, 0.251092f).next();
		bb.vertex(0.830987f, 0.239070f, 0.502301f).next();
		bb.vertex(0.894427f, 0.000000f, 0.447214f).next();
		bb.vertex(-0.447279f, 0.850695f, 0.276152f).next();
		bb.vertex(-0.138387f, 0.951098f, 0.276155f).next();
		bb.vertex(-0.308897f, 0.951095f, 0.000000f).next();
		bb.vertex(-0.587613f, 0.809142f, 0.000000f).next();
		bb.vertex(-0.447279f, 0.850695f, 0.276152f).next();
		bb.vertex(-0.308897f, 0.951095f, 0.000000f).next();
		bb.vertex(-0.447279f, 0.850695f, 0.276152f).next();
		bb.vertex(-0.263253f, 0.809151f, 0.525331f).next();
		bb.vertex(-0.138387f, 0.951098f, 0.276155f).next();
		bb.vertex(-0.308897f, 0.951095f, 0.000000f).next();
		bb.vertex(-0.138387f, 0.951098f, 0.276155f).next();
		bb.vertex(-0.000000f, 1.000000f, 0.000000f).next();
		bb.vertex(-0.435705f, 0.864390f, -0.250979f).next();
		bb.vertex(-0.308897f, 0.951095f, 0.000000f).next();
		bb.vertex(-0.154949f, 0.955518f, -0.250950f).next();
		bb.vertex(-0.275974f, 0.850921f, -0.446958f).next();
		bb.vertex(-0.435705f, 0.864390f, -0.250979f).next();
		bb.vertex(-0.154949f, 0.955518f, -0.250950f).next();
		bb.vertex(-0.435705f, 0.864390f, -0.250979f).next();
		bb.vertex(-0.587613f, 0.809142f, 0.000000f).next();
		bb.vertex(-0.308897f, 0.951095f, 0.000000f).next();
		bb.vertex(-0.154949f, 0.955518f, -0.250950f).next();
		bb.vertex(-0.308897f, 0.951095f, 0.000000f).next();
		bb.vertex(-0.000000f, 1.000000f, 0.000000f).next();
		bb.vertex(-0.687142f, 0.681809f, 0.250942f).next();
		bb.vertex(-0.532202f, 0.681814f, 0.501887f).next();
		bb.vertex(-0.447279f, 0.850695f, 0.276152f).next();
		bb.vertex(-0.587613f, 0.809142f, 0.000000f).next();
		bb.vertex(-0.687142f, 0.681809f, 0.250942f).next();
		bb.vertex(-0.447279f, 0.850695f, 0.276152f).next();
		bb.vertex(-0.687142f, 0.681809f, 0.250942f).next();
		bb.vertex(-0.723761f, 0.525826f, 0.446852f).next();
		bb.vertex(-0.532202f, 0.681814f, 0.501887f).next();
		bb.vertex(-0.447279f, 0.850695f, 0.276152f).next();
		bb.vertex(-0.532202f, 0.681814f, 0.501887f).next();
		bb.vertex(-0.263253f, 0.809151f, 0.525331f).next();
		bb.vertex(-0.138387f, 0.951098f, 0.276155f).next();
		bb.vertex(0.029197f, 0.864397f, 0.501962f).next();
		bb.vertex(0.154949f, 0.955518f, 0.250950f).next();
		bb.vertex(-0.000000f, 1.000000f, 0.000000f).next();
		bb.vertex(-0.138387f, 0.951098f, 0.276155f).next();
		bb.vertex(0.154949f, 0.955518f, 0.250950f).next();
		bb.vertex(-0.138387f, 0.951098f, 0.276155f).next();
		bb.vertex(-0.263253f, 0.809151f, 0.525331f).next();
		bb.vertex(0.029197f, 0.864397f, 0.501962f).next();
		bb.vertex(0.154949f, 0.955518f, 0.250950f).next();
		bb.vertex(0.029197f, 0.864397f, 0.501962f).next();
		bb.vertex(0.275974f, 0.850921f, 0.446958f).next();
		bb.vertex(-0.947259f, -0.162511f, 0.276207f).next();
		bb.vertex(-0.947259f, 0.162511f, 0.276207f).next();
		bb.vertex(-1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(-0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(-0.947259f, -0.162511f, 0.276207f).next();
		bb.vertex(-1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(-0.947259f, -0.162511f, 0.276207f).next();
		bb.vertex(-0.850891f, 0.000000f, 0.525343f).next();
		bb.vertex(-0.947259f, 0.162511f, 0.276207f).next();
		bb.vertex(-1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(-0.947259f, 0.162511f, 0.276207f).next();
		bb.vertex(-0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(-0.956623f, -0.147734f, -0.251092f).next();
		bb.vertex(-1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(-0.956623f, 0.147734f, -0.251092f).next();
		bb.vertex(-0.894427f, 0.000000f, -0.447214f).next();
		bb.vertex(-0.956623f, -0.147734f, -0.251092f).next();
		bb.vertex(-0.956623f, 0.147734f, -0.251092f).next();
		bb.vertex(-0.956623f, -0.147734f, -0.251092f).next();
		bb.vertex(-0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(-1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(-0.956623f, 0.147734f, -0.251092f).next();
		bb.vertex(-1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(-0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(-0.860690f, -0.442978f, 0.250964f).next();
		bb.vertex(-0.812942f, -0.295309f, 0.501913f).next();
		bb.vertex(-0.947259f, -0.162511f, 0.276207f).next();
		bb.vertex(-0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(-0.860690f, -0.442978f, 0.250964f).next();
		bb.vertex(-0.947259f, -0.162511f, 0.276207f).next();
		bb.vertex(-0.860690f, -0.442978f, 0.250964f).next();
		bb.vertex(-0.723761f, -0.525826f, 0.446852f).next();
		bb.vertex(-0.812942f, -0.295309f, 0.501913f).next();
		bb.vertex(-0.947259f, -0.162511f, 0.276207f).next();
		bb.vertex(-0.812942f, -0.295309f, 0.501913f).next();
		bb.vertex(-0.850891f, 0.000000f, 0.525343f).next();
		bb.vertex(-0.947259f, 0.162511f, 0.276207f).next();
		bb.vertex(-0.812942f, 0.295309f, 0.501913f).next();
		bb.vertex(-0.860690f, 0.442978f, 0.250964f).next();
		bb.vertex(-0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(-0.947259f, 0.162511f, 0.276207f).next();
		bb.vertex(-0.860690f, 0.442978f, 0.250964f).next();
		bb.vertex(-0.947259f, 0.162511f, 0.276207f).next();
		bb.vertex(-0.850891f, 0.000000f, 0.525343f).next();
		bb.vertex(-0.812942f, 0.295309f, 0.501913f).next();
		bb.vertex(-0.860690f, 0.442978f, 0.250964f).next();
		bb.vertex(-0.812942f, 0.295309f, 0.501913f).next();
		bb.vertex(-0.723761f, 0.525826f, 0.446852f).next();
		bb.vertex(-0.138387f, -0.951098f, 0.276155f).next();
		bb.vertex(-0.447279f, -0.850695f, 0.276152f).next();
		bb.vertex(-0.308897f, -0.951095f, 0.000000f).next();
		bb.vertex(-0.000000f, -1.000000f, 0.000000f).next();
		bb.vertex(-0.138387f, -0.951098f, 0.276155f).next();
		bb.vertex(-0.308897f, -0.951095f, 0.000000f).next();
		bb.vertex(-0.138387f, -0.951098f, 0.276155f).next();
		bb.vertex(-0.263253f, -0.809151f, 0.525331f).next();
		bb.vertex(-0.447279f, -0.850695f, 0.276152f).next();
		bb.vertex(-0.308897f, -0.951095f, 0.000000f).next();
		bb.vertex(-0.447279f, -0.850695f, 0.276152f).next();
		bb.vertex(-0.587613f, -0.809142f, 0.000000f).next();
		bb.vertex(-0.154949f, -0.955518f, -0.250950f).next();
		bb.vertex(-0.308897f, -0.951095f, 0.000000f).next();
		bb.vertex(-0.435705f, -0.864391f, -0.250979f).next();
		bb.vertex(-0.275974f, -0.850921f, -0.446958f).next();
		bb.vertex(-0.154949f, -0.955518f, -0.250950f).next();
		bb.vertex(-0.435705f, -0.864391f, -0.250979f).next();
		bb.vertex(-0.154949f, -0.955518f, -0.250950f).next();
		bb.vertex(-0.000000f, -1.000000f, 0.000000f).next();
		bb.vertex(-0.308897f, -0.951095f, 0.000000f).next();
		bb.vertex(-0.435705f, -0.864391f, -0.250979f).next();
		bb.vertex(-0.308897f, -0.951095f, 0.000000f).next();
		bb.vertex(-0.587613f, -0.809142f, 0.000000f).next();
		bb.vertex(0.154949f, -0.955518f, 0.250950f).next();
		bb.vertex(0.029197f, -0.864397f, 0.501962f).next();
		bb.vertex(-0.138387f, -0.951098f, 0.276155f).next();
		bb.vertex(-0.000000f, -1.000000f, 0.000000f).next();
		bb.vertex(0.154949f, -0.955518f, 0.250950f).next();
		bb.vertex(-0.138387f, -0.951098f, 0.276155f).next();
		bb.vertex(0.154949f, -0.955518f, 0.250950f).next();
		bb.vertex(0.275974f, -0.850921f, 0.446958f).next();
		bb.vertex(0.029197f, -0.864397f, 0.501962f).next();
		bb.vertex(-0.138387f, -0.951098f, 0.276155f).next();
		bb.vertex(0.029197f, -0.864397f, 0.501962f).next();
		bb.vertex(-0.263253f, -0.809151f, 0.525331f).next();
		bb.vertex(-0.447279f, -0.850695f, 0.276152f).next();
		bb.vertex(-0.532202f, -0.681814f, 0.501887f).next();
		bb.vertex(-0.687142f, -0.681809f, 0.250942f).next();
		bb.vertex(-0.587613f, -0.809142f, 0.000000f).next();
		bb.vertex(-0.447279f, -0.850695f, 0.276152f).next();
		bb.vertex(-0.687142f, -0.681809f, 0.250942f).next();
		bb.vertex(-0.447279f, -0.850695f, 0.276152f).next();
		bb.vertex(-0.263253f, -0.809151f, 0.525331f).next();
		bb.vertex(-0.532202f, -0.681814f, 0.501887f).next();
		bb.vertex(-0.687142f, -0.681809f, 0.250942f).next();
		bb.vertex(-0.532202f, -0.681814f, 0.501887f).next();
		bb.vertex(-0.723761f, -0.525826f, 0.446852f).next();
		bb.vertex(0.861697f, -0.425594f, 0.276312f).next();
		bb.vertex(0.670567f, -0.688490f, 0.276261f).next();
		bb.vertex(0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(0.861697f, -0.425594f, 0.276312f).next();
		bb.vertex(0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(0.861697f, -0.425594f, 0.276312f).next();
		bb.vertex(0.687957f, -0.500386f, 0.525670f).next();
		bb.vertex(0.670567f, -0.688490f, 0.276261f).next();
		bb.vertex(0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(0.670567f, -0.688490f, 0.276261f).next();
		bb.vertex(0.587612f, -0.809142f, 0.000000f).next();
		bb.vertex(0.860690f, -0.442978f, -0.250964f).next();
		bb.vertex(0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(0.687142f, -0.681809f, -0.250942f).next();
		bb.vertex(0.723761f, -0.525826f, -0.446852f).next();
		bb.vertex(0.860690f, -0.442978f, -0.250964f).next();
		bb.vertex(0.687142f, -0.681809f, -0.250942f).next();
		bb.vertex(0.860690f, -0.442978f, -0.250964f).next();
		bb.vertex(0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(0.687142f, -0.681809f, -0.250942f).next();
		bb.vertex(0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(0.587612f, -0.809142f, 0.000000f).next();
		bb.vertex(0.956623f, -0.147734f, 0.251092f).next();
		bb.vertex(0.830987f, -0.239070f, 0.502301f).next();
		bb.vertex(0.861697f, -0.425594f, 0.276312f).next();
		bb.vertex(0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(0.956623f, -0.147734f, 0.251092f).next();
		bb.vertex(0.861697f, -0.425594f, 0.276312f).next();
		bb.vertex(0.956623f, -0.147734f, 0.251092f).next();
		bb.vertex(0.894427f, 0.000000f, 0.447214f).next();
		bb.vertex(0.830987f, -0.239070f, 0.502301f).next();
		bb.vertex(0.861697f, -0.425594f, 0.276312f).next();
		bb.vertex(0.830987f, -0.239070f, 0.502301f).next();
		bb.vertex(0.687957f, -0.500386f, 0.525670f).next();
		bb.vertex(0.670567f, -0.688490f, 0.276261f).next();
		bb.vertex(0.483585f, -0.716953f, 0.502120f).next();
		bb.vertex(0.435704f, -0.864391f, 0.250979f).next();
		bb.vertex(0.587612f, -0.809142f, 0.000000f).next();
		bb.vertex(0.670567f, -0.688490f, 0.276261f).next();
		bb.vertex(0.435704f, -0.864391f, 0.250979f).next();
		bb.vertex(0.670567f, -0.688490f, 0.276261f).next();
		bb.vertex(0.687957f, -0.500386f, 0.525670f).next();
		bb.vertex(0.483585f, -0.716953f, 0.502120f).next();
		bb.vertex(0.435704f, -0.864391f, 0.250979f).next();
		bb.vertex(0.483585f, -0.716953f, 0.502120f).next();
		bb.vertex(0.275974f, -0.850921f, 0.446958f).next();
		bb.vertex(0.138386f, 0.951098f, -0.276155f).next();
		bb.vertex(0.308898f, 0.951095f, 0.000000f).next();
		bb.vertex(0.447279f, 0.850695f, -0.276152f).next();
		bb.vertex(0.263253f, 0.809151f, -0.525331f).next();
		bb.vertex(0.138386f, 0.951098f, -0.276155f).next();
		bb.vertex(0.447279f, 0.850695f, -0.276152f).next();
		bb.vertex(0.138386f, 0.951098f, -0.276155f).next();
		bb.vertex(-0.000000f, 1.000000f, 0.000000f).next();
		bb.vertex(0.308898f, 0.951095f, 0.000000f).next();
		bb.vertex(0.447279f, 0.850695f, -0.276152f).next();
		bb.vertex(0.308898f, 0.951095f, 0.000000f).next();
		bb.vertex(0.587612f, 0.809142f, 0.000000f).next();
		bb.vertex(0.532202f, 0.681814f, -0.501887f).next();
		bb.vertex(0.447279f, 0.850695f, -0.276152f).next();
		bb.vertex(0.687142f, 0.681809f, -0.250942f).next();
		bb.vertex(0.723761f, 0.525826f, -0.446852f).next();
		bb.vertex(0.532202f, 0.681814f, -0.501887f).next();
		bb.vertex(0.687142f, 0.681809f, -0.250942f).next();
		bb.vertex(0.532202f, 0.681814f, -0.501887f).next();
		bb.vertex(0.263253f, 0.809151f, -0.525331f).next();
		bb.vertex(0.447279f, 0.850695f, -0.276152f).next();
		bb.vertex(0.687142f, 0.681809f, -0.250942f).next();
		bb.vertex(0.447279f, 0.850695f, -0.276152f).next();
		bb.vertex(0.587612f, 0.809142f, 0.000000f).next();
		bb.vertex(-0.029197f, 0.864397f, -0.501962f).next();
		bb.vertex(-0.154949f, 0.955518f, -0.250950f).next();
		bb.vertex(0.138386f, 0.951098f, -0.276155f).next();
		bb.vertex(0.263253f, 0.809151f, -0.525331f).next();
		bb.vertex(-0.029197f, 0.864397f, -0.501962f).next();
		bb.vertex(0.138386f, 0.951098f, -0.276155f).next();
		bb.vertex(-0.029197f, 0.864397f, -0.501962f).next();
		bb.vertex(-0.275974f, 0.850921f, -0.446958f).next();
		bb.vertex(-0.154949f, 0.955518f, -0.250950f).next();
		bb.vertex(0.138386f, 0.951098f, -0.276155f).next();
		bb.vertex(-0.154949f, 0.955518f, -0.250950f).next();
		bb.vertex(-0.000000f, 1.000000f, 0.000000f).next();
		bb.vertex(0.308898f, 0.951095f, 0.000000f).next();
		bb.vertex(0.154949f, 0.955518f, 0.250950f).next();
		bb.vertex(0.435704f, 0.864390f, 0.250979f).next();
		bb.vertex(0.587612f, 0.809142f, 0.000000f).next();
		bb.vertex(0.308898f, 0.951095f, 0.000000f).next();
		bb.vertex(0.435704f, 0.864390f, 0.250979f).next();
		bb.vertex(0.308898f, 0.951095f, 0.000000f).next();
		bb.vertex(-0.000000f, 1.000000f, 0.000000f).next();
		bb.vertex(0.154949f, 0.955518f, 0.250950f).next();
		bb.vertex(0.435704f, 0.864390f, 0.250979f).next();
		bb.vertex(0.154949f, 0.955518f, 0.250950f).next();
		bb.vertex(0.275974f, 0.850921f, 0.446958f).next();
		bb.vertex(-0.861697f, 0.425594f, -0.276312f).next();
		bb.vertex(-0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(-0.670567f, 0.688490f, -0.276261f).next();
		bb.vertex(-0.687957f, 0.500386f, -0.525670f).next();
		bb.vertex(-0.861697f, 0.425594f, -0.276312f).next();
		bb.vertex(-0.670567f, 0.688490f, -0.276261f).next();
		bb.vertex(-0.861697f, 0.425594f, -0.276312f).next();
		bb.vertex(-0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(-0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(-0.670567f, 0.688490f, -0.276261f).next();
		bb.vertex(-0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(-0.587613f, 0.809142f, 0.000000f).next();
		bb.vertex(-0.483585f, 0.716953f, -0.502120f).next();
		bb.vertex(-0.670567f, 0.688490f, -0.276261f).next();
		bb.vertex(-0.435705f, 0.864390f, -0.250979f).next();
		bb.vertex(-0.275974f, 0.850921f, -0.446958f).next();
		bb.vertex(-0.483585f, 0.716953f, -0.502120f).next();
		bb.vertex(-0.435705f, 0.864390f, -0.250979f).next();
		bb.vertex(-0.483585f, 0.716953f, -0.502120f).next();
		bb.vertex(-0.687957f, 0.500386f, -0.525670f).next();
		bb.vertex(-0.670567f, 0.688490f, -0.276261f).next();
		bb.vertex(-0.435705f, 0.864390f, -0.250979f).next();
		bb.vertex(-0.670567f, 0.688490f, -0.276261f).next();
		bb.vertex(-0.587613f, 0.809142f, 0.000000f).next();
		bb.vertex(-0.830987f, 0.239070f, -0.502301f).next();
		bb.vertex(-0.956623f, 0.147734f, -0.251092f).next();
		bb.vertex(-0.861697f, 0.425594f, -0.276312f).next();
		bb.vertex(-0.687957f, 0.500386f, -0.525670f).next();
		bb.vertex(-0.830987f, 0.239070f, -0.502301f).next();
		bb.vertex(-0.861697f, 0.425594f, -0.276312f).next();
		bb.vertex(-0.830987f, 0.239070f, -0.502301f).next();
		bb.vertex(-0.894427f, 0.000000f, -0.447214f).next();
		bb.vertex(-0.956623f, 0.147734f, -0.251092f).next();
		bb.vertex(-0.861697f, 0.425594f, -0.276312f).next();
		bb.vertex(-0.956623f, 0.147734f, -0.251092f).next();
		bb.vertex(-0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(-0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(-0.860690f, 0.442978f, 0.250964f).next();
		bb.vertex(-0.687142f, 0.681809f, 0.250942f).next();
		bb.vertex(-0.587613f, 0.809142f, 0.000000f).next();
		bb.vertex(-0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(-0.687142f, 0.681809f, 0.250942f).next();
		bb.vertex(-0.808883f, 0.587970f, 0.000000f).next();
		bb.vertex(-0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(-0.860690f, 0.442978f, 0.250964f).next();
		bb.vertex(-0.687142f, 0.681809f, 0.250942f).next();
		bb.vertex(-0.860690f, 0.442978f, 0.250964f).next();
		bb.vertex(-0.723761f, 0.525826f, 0.446852f).next();
		bb.vertex(-0.670567f, -0.688490f, -0.276261f).next();
		bb.vertex(-0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(-0.861697f, -0.425594f, -0.276312f).next();
		bb.vertex(-0.687957f, -0.500386f, -0.525670f).next();
		bb.vertex(-0.670567f, -0.688490f, -0.276261f).next();
		bb.vertex(-0.861697f, -0.425594f, -0.276312f).next();
		bb.vertex(-0.670567f, -0.688490f, -0.276261f).next();
		bb.vertex(-0.587613f, -0.809142f, 0.000000f).next();
		bb.vertex(-0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(-0.861697f, -0.425594f, -0.276312f).next();
		bb.vertex(-0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(-0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(-0.830987f, -0.239070f, -0.502301f).next();
		bb.vertex(-0.861697f, -0.425594f, -0.276312f).next();
		bb.vertex(-0.956623f, -0.147734f, -0.251092f).next();
		bb.vertex(-0.894427f, 0.000000f, -0.447214f).next();
		bb.vertex(-0.830987f, -0.239070f, -0.502301f).next();
		bb.vertex(-0.956623f, -0.147734f, -0.251092f).next();
		bb.vertex(-0.830987f, -0.239070f, -0.502301f).next();
		bb.vertex(-0.687957f, -0.500386f, -0.525670f).next();
		bb.vertex(-0.861697f, -0.425594f, -0.276312f).next();
		bb.vertex(-0.956623f, -0.147734f, -0.251092f).next();
		bb.vertex(-0.861697f, -0.425594f, -0.276312f).next();
		bb.vertex(-0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(-0.483585f, -0.716953f, -0.502120f).next();
		bb.vertex(-0.435705f, -0.864391f, -0.250979f).next();
		bb.vertex(-0.670567f, -0.688490f, -0.276261f).next();
		bb.vertex(-0.687957f, -0.500386f, -0.525670f).next();
		bb.vertex(-0.483585f, -0.716953f, -0.502120f).next();
		bb.vertex(-0.670567f, -0.688490f, -0.276261f).next();
		bb.vertex(-0.483585f, -0.716953f, -0.502120f).next();
		bb.vertex(-0.275974f, -0.850921f, -0.446958f).next();
		bb.vertex(-0.435705f, -0.864391f, -0.250979f).next();
		bb.vertex(-0.670567f, -0.688490f, -0.276261f).next();
		bb.vertex(-0.435705f, -0.864391f, -0.250979f).next();
		bb.vertex(-0.587613f, -0.809142f, 0.000000f).next();
		bb.vertex(-0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(-0.687142f, -0.681809f, 0.250942f).next();
		bb.vertex(-0.860690f, -0.442978f, 0.250964f).next();
		bb.vertex(-0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(-0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(-0.860690f, -0.442978f, 0.250964f).next();
		bb.vertex(-0.808883f, -0.587970f, 0.000000f).next();
		bb.vertex(-0.587613f, -0.809142f, 0.000000f).next();
		bb.vertex(-0.687142f, -0.681809f, 0.250942f).next();
		bb.vertex(-0.860690f, -0.442978f, 0.250964f).next();
		bb.vertex(-0.687142f, -0.681809f, 0.250942f).next();
		bb.vertex(-0.723761f, -0.525826f, 0.446852f).next();
		bb.vertex(0.447279f, -0.850695f, -0.276152f).next();
		bb.vertex(0.308898f, -0.951095f, 0.000000f).next();
		bb.vertex(0.138386f, -0.951098f, -0.276155f).next();
		bb.vertex(0.263253f, -0.809151f, -0.525331f).next();
		bb.vertex(0.447279f, -0.850695f, -0.276152f).next();
		bb.vertex(0.138386f, -0.951098f, -0.276155f).next();
		bb.vertex(0.447279f, -0.850695f, -0.276152f).next();
		bb.vertex(0.587612f, -0.809142f, 0.000000f).next();
		bb.vertex(0.308898f, -0.951095f, 0.000000f).next();
		bb.vertex(0.138386f, -0.951098f, -0.276155f).next();
		bb.vertex(0.308898f, -0.951095f, 0.000000f).next();
		bb.vertex(-0.000000f, -1.000000f, 0.000000f).next();
		bb.vertex(-0.029197f, -0.864397f, -0.501962f).next();
		bb.vertex(0.138386f, -0.951098f, -0.276155f).next();
		bb.vertex(-0.154949f, -0.955518f, -0.250950f).next();
		bb.vertex(-0.275974f, -0.850921f, -0.446958f).next();
		bb.vertex(-0.029197f, -0.864397f, -0.501962f).next();
		bb.vertex(-0.154949f, -0.955518f, -0.250950f).next();
		bb.vertex(-0.029197f, -0.864397f, -0.501962f).next();
		bb.vertex(0.263253f, -0.809151f, -0.525331f).next();
		bb.vertex(0.138386f, -0.951098f, -0.276155f).next();
		bb.vertex(-0.154949f, -0.955518f, -0.250950f).next();
		bb.vertex(0.138386f, -0.951098f, -0.276155f).next();
		bb.vertex(-0.000000f, -1.000000f, 0.000000f).next();
		bb.vertex(0.532202f, -0.681814f, -0.501887f).next();
		bb.vertex(0.687142f, -0.681809f, -0.250942f).next();
		bb.vertex(0.447279f, -0.850695f, -0.276152f).next();
		bb.vertex(0.263253f, -0.809151f, -0.525331f).next();
		bb.vertex(0.532202f, -0.681814f, -0.501887f).next();
		bb.vertex(0.447279f, -0.850695f, -0.276152f).next();
		bb.vertex(0.532202f, -0.681814f, -0.501887f).next();
		bb.vertex(0.723761f, -0.525826f, -0.446852f).next();
		bb.vertex(0.687142f, -0.681809f, -0.250942f).next();
		bb.vertex(0.447279f, -0.850695f, -0.276152f).next();
		bb.vertex(0.687142f, -0.681809f, -0.250942f).next();
		bb.vertex(0.587612f, -0.809142f, 0.000000f).next();
		bb.vertex(0.308898f, -0.951095f, 0.000000f).next();
		bb.vertex(0.435704f, -0.864391f, 0.250979f).next();
		bb.vertex(0.154949f, -0.955518f, 0.250950f).next();
		bb.vertex(-0.000000f, -1.000000f, 0.000000f).next();
		bb.vertex(0.308898f, -0.951095f, 0.000000f).next();
		bb.vertex(0.154949f, -0.955518f, 0.250950f).next();
		bb.vertex(0.308898f, -0.951095f, 0.000000f).next();
		bb.vertex(0.587612f, -0.809142f, 0.000000f).next();
		bb.vertex(0.435704f, -0.864391f, 0.250979f).next();
		bb.vertex(0.154949f, -0.955518f, 0.250950f).next();
		bb.vertex(0.435704f, -0.864391f, 0.250979f).next();
		bb.vertex(0.275974f, -0.850921f, 0.446958f).next();
		bb.vertex(0.947259f, 0.162511f, -0.276207f).next();
		bb.vertex(1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(0.947259f, -0.162511f, -0.276207f).next();
		bb.vertex(0.850891f, 0.000000f, -0.525343f).next();
		bb.vertex(0.947259f, 0.162511f, -0.276207f).next();
		bb.vertex(0.947259f, -0.162511f, -0.276207f).next();
		bb.vertex(0.947259f, 0.162511f, -0.276207f).next();
		bb.vertex(0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(0.947259f, -0.162511f, -0.276207f).next();
		bb.vertex(1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(0.812942f, -0.295309f, -0.501913f).next();
		bb.vertex(0.947259f, -0.162511f, -0.276207f).next();
		bb.vertex(0.860690f, -0.442978f, -0.250964f).next();
		bb.vertex(0.723761f, -0.525826f, -0.446852f).next();
		bb.vertex(0.812942f, -0.295309f, -0.501913f).next();
		bb.vertex(0.860690f, -0.442978f, -0.250964f).next();
		bb.vertex(0.812942f, -0.295309f, -0.501913f).next();
		bb.vertex(0.850891f, 0.000000f, -0.525343f).next();
		bb.vertex(0.947259f, -0.162511f, -0.276207f).next();
		bb.vertex(0.860690f, -0.442978f, -0.250964f).next();
		bb.vertex(0.947259f, -0.162511f, -0.276207f).next();
		bb.vertex(0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(0.812942f, 0.295309f, -0.501913f).next();
		bb.vertex(0.860690f, 0.442978f, -0.250964f).next();
		bb.vertex(0.947259f, 0.162511f, -0.276207f).next();
		bb.vertex(0.850891f, 0.000000f, -0.525343f).next();
		bb.vertex(0.812942f, 0.295309f, -0.501913f).next();
		bb.vertex(0.947259f, 0.162511f, -0.276207f).next();
		bb.vertex(0.812942f, 0.295309f, -0.501913f).next();
		bb.vertex(0.723761f, 0.525826f, -0.446852f).next();
		bb.vertex(0.860690f, 0.442978f, -0.250964f).next();
		bb.vertex(0.947259f, 0.162511f, -0.276207f).next();
		bb.vertex(0.860690f, 0.442978f, -0.250964f).next();
		bb.vertex(0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(0.956623f, 0.147734f, 0.251092f).next();
		bb.vertex(0.956623f, -0.147734f, 0.251092f).next();
		bb.vertex(0.951008f, -0.309166f, 0.000000f).next();
		bb.vertex(1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(0.956623f, -0.147734f, 0.251092f).next();
		bb.vertex(1.000000f, 0.000000f, 0.000000f).next();
		bb.vertex(0.951008f, 0.309166f, 0.000000f).next();
		bb.vertex(0.956623f, 0.147734f, 0.251092f).next();
		bb.vertex(0.956623f, -0.147734f, 0.251092f).next();
		bb.vertex(0.956623f, 0.147734f, 0.251092f).next();
		bb.vertex(0.894427f, 0.000000f, 0.447214f).next();

	}

}

package com.unascribed.yttr.util;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.message.EntryMessage;
import org.apache.logging.log4j.message.Message;
import org.apache.logging.log4j.message.MessageFactory;
import org.apache.logging.log4j.util.MessageSupplier;
import org.apache.logging.log4j.util.Supplier;

public class YLog {

	private static final Logger LOG = LogManager.getLogger("Yttr");

	// AUTOGENERATED - DO NOT EDIT //
	
	public static void catching(Level level, Throwable t) {
		LOG.catching(level, t);
	}

	public static void catching(Throwable t) {
		LOG.catching(t);
	}

	public static void debug(Marker marker, Message msg) {
		LOG.debug(marker, msg);
	}

	public static void debug(Marker marker, Message msg, Throwable t) {
		LOG.debug(marker, msg, t);
	}

	public static void debug(Marker marker, MessageSupplier msgSupplier) {
		LOG.debug(marker, msgSupplier);
	}

	public static void debug(Marker marker, MessageSupplier msgSupplier, Throwable t) {
		LOG.debug(marker, msgSupplier, t);
	}

	public static void debug(Marker marker, CharSequence message) {
		LOG.debug(marker, message);
	}

	public static void debug(Marker marker, CharSequence message, Throwable t) {
		LOG.debug(marker, message, t);
	}

	public static void debug(Marker marker, Object message) {
		LOG.debug(marker, message);
	}

	public static void debug(Marker marker, Object message, Throwable t) {
		LOG.debug(marker, message, t);
	}

	public static void debug(Marker marker, String message) {
		LOG.debug(marker, message);
	}

	public static void debug(Marker marker, String message, Object... params) {
		LOG.debug(marker, message, params);
	}

	public static void debug(Marker marker, String message,
			Supplier<?>... paramSuppliers) {
		LOG.debug(marker, message, paramSuppliers);
	}

	public static void debug(Marker marker, String message, Throwable t) {
		LOG.debug(marker, message, t);
	}

	public static void debug(Marker marker, Supplier<?> msgSupplier) {
		LOG.debug(marker, msgSupplier);
	}

	public static void debug(Marker marker, Supplier<?> msgSupplier, Throwable t) {
		LOG.debug(marker, msgSupplier, t);
	}

	public static void debug(Message msg) {
		LOG.debug(msg);
	}

	public static void debug(Message msg, Throwable t) {
		LOG.debug(msg, t);
	}

	public static void debug(MessageSupplier msgSupplier) {
		LOG.debug(msgSupplier);
	}

	public static void debug(MessageSupplier msgSupplier, Throwable t) {
		LOG.debug(msgSupplier, t);
	}

	public static void debug(CharSequence message) {
		LOG.debug(message);
	}

	public static void debug(CharSequence message, Throwable t) {
		LOG.debug(message, t);
	}

	public static void debug(Object message) {
		LOG.debug(message);
	}

	public static void debug(Object message, Throwable t) {
		LOG.debug(message, t);
	}

	public static void debug(String message) {
		LOG.debug(message);
	}

	public static void debug(String message, Object... params) {
		LOG.debug(message, params);
	}

	public static void debug(String message, Supplier<?>... paramSuppliers) {
		LOG.debug(message, paramSuppliers);
	}

	public static void debug(String message, Throwable t) {
		LOG.debug(message, t);
	}

	public static void debug(Supplier<?> msgSupplier) {
		LOG.debug(msgSupplier);
	}

	public static void debug(Supplier<?> msgSupplier, Throwable t) {
		LOG.debug(msgSupplier, t);
	}

	public static void debug(Marker marker, String message, Object p0) {
		LOG.debug(marker, message, p0);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1) {
		LOG.debug(marker, message, p0, p1);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2) {
		LOG.debug(marker, message, p0, p1, p2);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3) {
		LOG.debug(marker, message, p0, p1, p2, p3);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4) {
		LOG.debug(marker, message, p0, p1, p2, p3, p4);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5) {
		LOG.debug(marker, message, p0, p1, p2, p3, p4, p5);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.debug(marker, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.debug(marker, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8) {
		LOG.debug(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void debug(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8, Object p9) {
		LOG.debug(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void debug(String message, Object p0) {
		LOG.debug(message, p0);
	}

	public static void debug(String message, Object p0, Object p1) {
		LOG.debug(message, p0, p1);
	}

	public static void debug(String message, Object p0, Object p1, Object p2) {
		LOG.debug(message, p0, p1, p2);
	}

	public static void debug(String message, Object p0, Object p1, Object p2,
			Object p3) {
		LOG.debug(message, p0, p1, p2, p3);
	}

	public static void debug(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4) {
		LOG.debug(message, p0, p1, p2, p3, p4);
	}

	public static void debug(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5) {
		LOG.debug(message, p0, p1, p2, p3, p4, p5);
	}

	public static void debug(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6) {
		LOG.debug(message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void debug(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.debug(message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void debug(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8) {
		LOG.debug(message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void debug(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8,
			Object p9) {
		LOG.debug(message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	@Deprecated
	public static void entry() {
		LOG.entry();
	}

	public static void entry(Object... params) {
		LOG.entry(params);
	}

	public static void error(Marker marker, Message msg) {
		LOG.error(marker, msg);
	}

	public static void error(Marker marker, Message msg, Throwable t) {
		LOG.error(marker, msg, t);
	}

	public static void error(Marker marker, MessageSupplier msgSupplier) {
		LOG.error(marker, msgSupplier);
	}

	public static void error(Marker marker, MessageSupplier msgSupplier, Throwable t) {
		LOG.error(marker, msgSupplier, t);
	}

	public static void error(Marker marker, CharSequence message) {
		LOG.error(marker, message);
	}

	public static void error(Marker marker, CharSequence message, Throwable t) {
		LOG.error(marker, message, t);
	}

	public static void error(Marker marker, Object message) {
		LOG.error(marker, message);
	}

	public static void error(Marker marker, Object message, Throwable t) {
		LOG.error(marker, message, t);
	}

	public static void error(Marker marker, String message) {
		LOG.error(marker, message);
	}

	public static void error(Marker marker, String message, Object... params) {
		LOG.error(marker, message, params);
	}

	public static void error(Marker marker, String message,
			Supplier<?>... paramSuppliers) {
		LOG.error(marker, message, paramSuppliers);
	}

	public static void error(Marker marker, String message, Throwable t) {
		LOG.error(marker, message, t);
	}

	public static void error(Marker marker, Supplier<?> msgSupplier) {
		LOG.error(marker, msgSupplier);
	}

	public static void error(Marker marker, Supplier<?> msgSupplier, Throwable t) {
		LOG.error(marker, msgSupplier, t);
	}

	public static void error(Message msg) {
		LOG.error(msg);
	}

	public static void error(Message msg, Throwable t) {
		LOG.error(msg, t);
	}

	public static void error(MessageSupplier msgSupplier) {
		LOG.error(msgSupplier);
	}

	public static void error(MessageSupplier msgSupplier, Throwable t) {
		LOG.error(msgSupplier, t);
	}

	public static void error(CharSequence message) {
		LOG.error(message);
	}

	public static void error(CharSequence message, Throwable t) {
		LOG.error(message, t);
	}

	public static void error(Object message) {
		LOG.error(message);
	}

	public static void error(Object message, Throwable t) {
		LOG.error(message, t);
	}

	public static void error(String message) {
		LOG.error(message);
	}

	public static void error(String message, Object... params) {
		LOG.error(message, params);
	}

	public static void error(String message, Supplier<?>... paramSuppliers) {
		LOG.error(message, paramSuppliers);
	}

	public static void error(String message, Throwable t) {
		LOG.error(message, t);
	}

	public static void error(Supplier<?> msgSupplier) {
		LOG.error(msgSupplier);
	}

	public static void error(Supplier<?> msgSupplier, Throwable t) {
		LOG.error(msgSupplier, t);
	}

	public static void error(Marker marker, String message, Object p0) {
		LOG.error(marker, message, p0);
	}

	public static void error(Marker marker, String message, Object p0, Object p1) {
		LOG.error(marker, message, p0, p1);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2) {
		LOG.error(marker, message, p0, p1, p2);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3) {
		LOG.error(marker, message, p0, p1, p2, p3);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4) {
		LOG.error(marker, message, p0, p1, p2, p3, p4);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5) {
		LOG.error(marker, message, p0, p1, p2, p3, p4, p5);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.error(marker, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.error(marker, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8) {
		LOG.error(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void error(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8, Object p9) {
		LOG.error(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void error(String message, Object p0) {
		LOG.error(message, p0);
	}

	public static void error(String message, Object p0, Object p1) {
		LOG.error(message, p0, p1);
	}

	public static void error(String message, Object p0, Object p1, Object p2) {
		LOG.error(message, p0, p1, p2);
	}

	public static void error(String message, Object p0, Object p1, Object p2,
			Object p3) {
		LOG.error(message, p0, p1, p2, p3);
	}

	public static void error(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4) {
		LOG.error(message, p0, p1, p2, p3, p4);
	}

	public static void error(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5) {
		LOG.error(message, p0, p1, p2, p3, p4, p5);
	}

	public static void error(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6) {
		LOG.error(message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void error(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.error(message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void error(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8) {
		LOG.error(message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void error(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8,
			Object p9) {
		LOG.error(message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	@Deprecated
	public static void exit() {
		LOG.exit();
	}

	@Deprecated
	public static <R> R exit(R result) {
		return LOG.exit(result);
	}

	public static void fatal(Marker marker, Message msg) {
		LOG.fatal(marker, msg);
	}

	public static void fatal(Marker marker, Message msg, Throwable t) {
		LOG.fatal(marker, msg, t);
	}

	public static void fatal(Marker marker, MessageSupplier msgSupplier) {
		LOG.fatal(marker, msgSupplier);
	}

	public static void fatal(Marker marker, MessageSupplier msgSupplier, Throwable t) {
		LOG.fatal(marker, msgSupplier, t);
	}

	public static void fatal(Marker marker, CharSequence message) {
		LOG.fatal(marker, message);
	}

	public static void fatal(Marker marker, CharSequence message, Throwable t) {
		LOG.fatal(marker, message, t);
	}

	public static void fatal(Marker marker, Object message) {
		LOG.fatal(marker, message);
	}

	public static void fatal(Marker marker, Object message, Throwable t) {
		LOG.fatal(marker, message, t);
	}

	public static void fatal(Marker marker, String message) {
		LOG.fatal(marker, message);
	}

	public static void fatal(Marker marker, String message, Object... params) {
		LOG.fatal(marker, message, params);
	}

	public static void fatal(Marker marker, String message,
			Supplier<?>... paramSuppliers) {
		LOG.fatal(marker, message, paramSuppliers);
	}

	public static void fatal(Marker marker, String message, Throwable t) {
		LOG.fatal(marker, message, t);
	}

	public static void fatal(Marker marker, Supplier<?> msgSupplier) {
		LOG.fatal(marker, msgSupplier);
	}

	public static void fatal(Marker marker, Supplier<?> msgSupplier, Throwable t) {
		LOG.fatal(marker, msgSupplier, t);
	}

	public static void fatal(Message msg) {
		LOG.fatal(msg);
	}

	public static void fatal(Message msg, Throwable t) {
		LOG.fatal(msg, t);
	}

	public static void fatal(MessageSupplier msgSupplier) {
		LOG.fatal(msgSupplier);
	}

	public static void fatal(MessageSupplier msgSupplier, Throwable t) {
		LOG.fatal(msgSupplier, t);
	}

	public static void fatal(CharSequence message) {
		LOG.fatal(message);
	}

	public static void fatal(CharSequence message, Throwable t) {
		LOG.fatal(message, t);
	}

	public static void fatal(Object message) {
		LOG.fatal(message);
	}

	public static void fatal(Object message, Throwable t) {
		LOG.fatal(message, t);
	}

	public static void fatal(String message) {
		LOG.fatal(message);
	}

	public static void fatal(String message, Object... params) {
		LOG.fatal(message, params);
	}

	public static void fatal(String message, Supplier<?>... paramSuppliers) {
		LOG.fatal(message, paramSuppliers);
	}

	public static void fatal(String message, Throwable t) {
		LOG.fatal(message, t);
	}

	public static void fatal(Supplier<?> msgSupplier) {
		LOG.fatal(msgSupplier);
	}

	public static void fatal(Supplier<?> msgSupplier, Throwable t) {
		LOG.fatal(msgSupplier, t);
	}

	public static void fatal(Marker marker, String message, Object p0) {
		LOG.fatal(marker, message, p0);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1) {
		LOG.fatal(marker, message, p0, p1);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2) {
		LOG.fatal(marker, message, p0, p1, p2);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3) {
		LOG.fatal(marker, message, p0, p1, p2, p3);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4) {
		LOG.fatal(marker, message, p0, p1, p2, p3, p4);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5) {
		LOG.fatal(marker, message, p0, p1, p2, p3, p4, p5);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.fatal(marker, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.fatal(marker, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8) {
		LOG.fatal(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void fatal(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8, Object p9) {
		LOG.fatal(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void fatal(String message, Object p0) {
		LOG.fatal(message, p0);
	}

	public static void fatal(String message, Object p0, Object p1) {
		LOG.fatal(message, p0, p1);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2) {
		LOG.fatal(message, p0, p1, p2);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2,
			Object p3) {
		LOG.fatal(message, p0, p1, p2, p3);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4) {
		LOG.fatal(message, p0, p1, p2, p3, p4);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5) {
		LOG.fatal(message, p0, p1, p2, p3, p4, p5);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6) {
		LOG.fatal(message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.fatal(message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8) {
		LOG.fatal(message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void fatal(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8,
			Object p9) {
		LOG.fatal(message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static Level getLevel() {
		return LOG.getLevel();
	}

	public static <MF extends MessageFactory> MF getMessageFactory() {
		return LOG.getMessageFactory();
	}

	public static String getName() {
		return LOG.getName();
	}

	public static void info(Marker marker, Message msg) {
		LOG.info(marker, msg);
	}

	public static void info(Marker marker, Message msg, Throwable t) {
		LOG.info(marker, msg, t);
	}

	public static void info(Marker marker, MessageSupplier msgSupplier) {
		LOG.info(marker, msgSupplier);
	}

	public static void info(Marker marker, MessageSupplier msgSupplier, Throwable t) {
		LOG.info(marker, msgSupplier, t);
	}

	public static void info(Marker marker, CharSequence message) {
		LOG.info(marker, message);
	}

	public static void info(Marker marker, CharSequence message, Throwable t) {
		LOG.info(marker, message, t);
	}

	public static void info(Marker marker, Object message) {
		LOG.info(marker, message);
	}

	public static void info(Marker marker, Object message, Throwable t) {
		LOG.info(marker, message, t);
	}

	public static void info(Marker marker, String message) {
		LOG.info(marker, message);
	}

	public static void info(Marker marker, String message, Object... params) {
		LOG.info(marker, message, params);
	}

	public static void info(Marker marker, String message,
			Supplier<?>... paramSuppliers) {
		LOG.info(marker, message, paramSuppliers);
	}

	public static void info(Marker marker, String message, Throwable t) {
		LOG.info(marker, message, t);
	}

	public static void info(Marker marker, Supplier<?> msgSupplier) {
		LOG.info(marker, msgSupplier);
	}

	public static void info(Marker marker, Supplier<?> msgSupplier, Throwable t) {
		LOG.info(marker, msgSupplier, t);
	}

	public static void info(Message msg) {
		LOG.info(msg);
	}

	public static void info(Message msg, Throwable t) {
		LOG.info(msg, t);
	}

	public static void info(MessageSupplier msgSupplier) {
		LOG.info(msgSupplier);
	}

	public static void info(MessageSupplier msgSupplier, Throwable t) {
		LOG.info(msgSupplier, t);
	}

	public static void info(CharSequence message) {
		LOG.info(message);
	}

	public static void info(CharSequence message, Throwable t) {
		LOG.info(message, t);
	}

	public static void info(Object message) {
		LOG.info(message);
	}

	public static void info(Object message, Throwable t) {
		LOG.info(message, t);
	}

	public static void info(String message) {
		LOG.info(message);
	}

	public static void info(String message, Object... params) {
		LOG.info(message, params);
	}

	public static void info(String message, Supplier<?>... paramSuppliers) {
		LOG.info(message, paramSuppliers);
	}

	public static void info(String message, Throwable t) {
		LOG.info(message, t);
	}

	public static void info(Supplier<?> msgSupplier) {
		LOG.info(msgSupplier);
	}

	public static void info(Supplier<?> msgSupplier, Throwable t) {
		LOG.info(msgSupplier, t);
	}

	public static void info(Marker marker, String message, Object p0) {
		LOG.info(marker, message, p0);
	}

	public static void info(Marker marker, String message, Object p0, Object p1) {
		LOG.info(marker, message, p0, p1);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2) {
		LOG.info(marker, message, p0, p1, p2);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3) {
		LOG.info(marker, message, p0, p1, p2, p3);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4) {
		LOG.info(marker, message, p0, p1, p2, p3, p4);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5) {
		LOG.info(marker, message, p0, p1, p2, p3, p4, p5);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.info(marker, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.info(marker, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8) {
		LOG.info(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void info(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8, Object p9) {
		LOG.info(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void info(String message, Object p0) {
		LOG.info(message, p0);
	}

	public static void info(String message, Object p0, Object p1) {
		LOG.info(message, p0, p1);
	}

	public static void info(String message, Object p0, Object p1, Object p2) {
		LOG.info(message, p0, p1, p2);
	}

	public static void info(String message, Object p0, Object p1, Object p2,
			Object p3) {
		LOG.info(message, p0, p1, p2, p3);
	}

	public static void info(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4) {
		LOG.info(message, p0, p1, p2, p3, p4);
	}

	public static void info(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5) {
		LOG.info(message, p0, p1, p2, p3, p4, p5);
	}

	public static void info(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6) {
		LOG.info(message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void info(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6, Object p7) {
		LOG.info(message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void info(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6, Object p7, Object p8) {
		LOG.info(message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void info(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6, Object p7, Object p8, Object p9) {
		LOG.info(message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static boolean isDebugEnabled() {
		return LOG.isDebugEnabled();
	}

	public static boolean isDebugEnabled(Marker marker) {
		return LOG.isDebugEnabled(marker);
	}

	public static boolean isEnabled(Level level) {
		return LOG.isEnabled(level);
	}

	public static boolean isEnabled(Level level, Marker marker) {
		return LOG.isEnabled(level, marker);
	}

	public static boolean isErrorEnabled() {
		return LOG.isErrorEnabled();
	}

	public static boolean isErrorEnabled(Marker marker) {
		return LOG.isErrorEnabled(marker);
	}

	public static boolean isFatalEnabled() {
		return LOG.isFatalEnabled();
	}

	public static boolean isFatalEnabled(Marker marker) {
		return LOG.isFatalEnabled(marker);
	}

	public static boolean isInfoEnabled() {
		return LOG.isInfoEnabled();
	}

	public static boolean isInfoEnabled(Marker marker) {
		return LOG.isInfoEnabled(marker);
	}

	public static boolean isTraceEnabled() {
		return LOG.isTraceEnabled();
	}

	public static boolean isTraceEnabled(Marker marker) {
		return LOG.isTraceEnabled(marker);
	}

	public static boolean isWarnEnabled() {
		return LOG.isWarnEnabled();
	}

	public static boolean isWarnEnabled(Marker marker) {
		return LOG.isWarnEnabled(marker);
	}

	public static void log(Level level, Marker marker, Message msg) {
		LOG.log(level, marker, msg);
	}

	public static void log(Level level, Marker marker, Message msg, Throwable t) {
		LOG.log(level, marker, msg, t);
	}

	public static void log(Level level, Marker marker, MessageSupplier msgSupplier) {
		LOG.log(level, marker, msgSupplier);
	}

	public static void log(Level level, Marker marker, MessageSupplier msgSupplier,
			Throwable t) {
		LOG.log(level, marker, msgSupplier, t);
	}

	public static void log(Level level, Marker marker, CharSequence message) {
		LOG.log(level, marker, message);
	}

	public static void log(Level level, Marker marker, CharSequence message,
			Throwable t) {
		LOG.log(level, marker, message, t);
	}

	public static void log(Level level, Marker marker, Object message) {
		LOG.log(level, marker, message);
	}

	public static void log(Level level, Marker marker, Object message, Throwable t) {
		LOG.log(level, marker, message, t);
	}

	public static void log(Level level, Marker marker, String message) {
		LOG.log(level, marker, message);
	}

	public static void log(Level level, Marker marker, String message,
			Object... params) {
		LOG.log(level, marker, message, params);
	}

	public static void log(Level level, Marker marker, String message,
			Supplier<?>... paramSuppliers) {
		LOG.log(level, marker, message, paramSuppliers);
	}

	public static void log(Level level, Marker marker, String message, Throwable t) {
		LOG.log(level, marker, message, t);
	}

	public static void log(Level level, Marker marker, Supplier<?> msgSupplier) {
		LOG.log(level, marker, msgSupplier);
	}

	public static void log(Level level, Marker marker, Supplier<?> msgSupplier,
			Throwable t) {
		LOG.log(level, marker, msgSupplier, t);
	}

	public static void log(Level level, Message msg) {
		LOG.log(level, msg);
	}

	public static void log(Level level, Message msg, Throwable t) {
		LOG.log(level, msg, t);
	}

	public static void log(Level level, MessageSupplier msgSupplier) {
		LOG.log(level, msgSupplier);
	}

	public static void log(Level level, MessageSupplier msgSupplier, Throwable t) {
		LOG.log(level, msgSupplier, t);
	}

	public static void log(Level level, CharSequence message) {
		LOG.log(level, message);
	}

	public static void log(Level level, CharSequence message, Throwable t) {
		LOG.log(level, message, t);
	}

	public static void log(Level level, Object message) {
		LOG.log(level, message);
	}

	public static void log(Level level, Object message, Throwable t) {
		LOG.log(level, message, t);
	}

	public static void log(Level level, String message) {
		LOG.log(level, message);
	}

	public static void log(Level level, String message, Object... params) {
		LOG.log(level, message, params);
	}

	public static void log(Level level, String message,
			Supplier<?>... paramSuppliers) {
		LOG.log(level, message, paramSuppliers);
	}

	public static void log(Level level, String message, Throwable t) {
		LOG.log(level, message, t);
	}

	public static void log(Level level, Supplier<?> msgSupplier) {
		LOG.log(level, msgSupplier);
	}

	public static void log(Level level, Supplier<?> msgSupplier, Throwable t) {
		LOG.log(level, msgSupplier, t);
	}

	public static void log(Level level, Marker marker, String message, Object p0) {
		LOG.log(level, marker, message, p0);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1) {
		LOG.log(level, marker, message, p0, p1);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2) {
		LOG.log(level, marker, message, p0, p1, p2);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2, Object p3) {
		LOG.log(level, marker, message, p0, p1, p2, p3);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2, Object p3, Object p4) {
		LOG.log(level, marker, message, p0, p1, p2, p3, p4);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2, Object p3, Object p4, Object p5) {
		LOG.log(level, marker, message, p0, p1, p2, p3, p4, p5);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.log(level, marker, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2, Object p3, Object p4, Object p5, Object p6,
			Object p7) {
		LOG.log(level, marker, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2, Object p3, Object p4, Object p5, Object p6,
			Object p7, Object p8) {
		LOG.log(level, marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void log(Level level, Marker marker, String message, Object p0,
			Object p1, Object p2, Object p3, Object p4, Object p5, Object p6,
			Object p7, Object p8, Object p9) {
		LOG.log(level, marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void log(Level level, String message, Object p0) {
		LOG.log(level, message, p0);
	}

	public static void log(Level level, String message, Object p0, Object p1) {
		LOG.log(level, message, p0, p1);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2) {
		LOG.log(level, message, p0, p1, p2);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2, Object p3) {
		LOG.log(level, message, p0, p1, p2, p3);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4) {
		LOG.log(level, message, p0, p1, p2, p3, p4);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5) {
		LOG.log(level, message, p0, p1, p2, p3, p4, p5);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.log(level, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.log(level, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8) {
		LOG.log(level, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void log(Level level, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8, Object p9) {
		LOG.log(level, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void printf(Level level, Marker marker, String format,
			Object... params) {
		LOG.printf(level, marker, format, params);
	}

	public static void printf(Level level, String format, Object... params) {
		LOG.printf(level, format, params);
	}

	public static <T extends Throwable> T throwing(Level level, T t) {
		return LOG.throwing(level, t);
	}

	public static <T extends Throwable> T throwing(T t) {
		return LOG.throwing(t);
	}

	public static void trace(Marker marker, Message msg) {
		LOG.trace(marker, msg);
	}

	public static void trace(Marker marker, Message msg, Throwable t) {
		LOG.trace(marker, msg, t);
	}

	public static void trace(Marker marker, MessageSupplier msgSupplier) {
		LOG.trace(marker, msgSupplier);
	}

	public static void trace(Marker marker, MessageSupplier msgSupplier, Throwable t) {
		LOG.trace(marker, msgSupplier, t);
	}

	public static void trace(Marker marker, CharSequence message) {
		LOG.trace(marker, message);
	}

	public static void trace(Marker marker, CharSequence message, Throwable t) {
		LOG.trace(marker, message, t);
	}

	public static void trace(Marker marker, Object message) {
		LOG.trace(marker, message);
	}

	public static void trace(Marker marker, Object message, Throwable t) {
		LOG.trace(marker, message, t);
	}

	public static void trace(Marker marker, String message) {
		LOG.trace(marker, message);
	}

	public static void trace(Marker marker, String message, Object... params) {
		LOG.trace(marker, message, params);
	}

	public static void trace(Marker marker, String message,
			Supplier<?>... paramSuppliers) {
		LOG.trace(marker, message, paramSuppliers);
	}

	public static void trace(Marker marker, String message, Throwable t) {
		LOG.trace(marker, message, t);
	}

	public static void trace(Marker marker, Supplier<?> msgSupplier) {
		LOG.trace(marker, msgSupplier);
	}

	public static void trace(Marker marker, Supplier<?> msgSupplier, Throwable t) {
		LOG.trace(marker, msgSupplier, t);
	}

	public static void trace(Message msg) {
		LOG.trace(msg);
	}

	public static void trace(Message msg, Throwable t) {
		LOG.trace(msg, t);
	}

	public static void trace(MessageSupplier msgSupplier) {
		LOG.trace(msgSupplier);
	}

	public static void trace(MessageSupplier msgSupplier, Throwable t) {
		LOG.trace(msgSupplier, t);
	}

	public static void trace(CharSequence message) {
		LOG.trace(message);
	}

	public static void trace(CharSequence message, Throwable t) {
		LOG.trace(message, t);
	}

	public static void trace(Object message) {
		LOG.trace(message);
	}

	public static void trace(Object message, Throwable t) {
		LOG.trace(message, t);
	}

	public static void trace(String message) {
		LOG.trace(message);
	}

	public static void trace(String message, Object... params) {
		LOG.trace(message, params);
	}

	public static void trace(String message, Supplier<?>... paramSuppliers) {
		LOG.trace(message, paramSuppliers);
	}

	public static void trace(String message, Throwable t) {
		LOG.trace(message, t);
	}

	public static void trace(Supplier<?> msgSupplier) {
		LOG.trace(msgSupplier);
	}

	public static void trace(Supplier<?> msgSupplier, Throwable t) {
		LOG.trace(msgSupplier, t);
	}

	public static void trace(Marker marker, String message, Object p0) {
		LOG.trace(marker, message, p0);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1) {
		LOG.trace(marker, message, p0, p1);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2) {
		LOG.trace(marker, message, p0, p1, p2);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3) {
		LOG.trace(marker, message, p0, p1, p2, p3);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4) {
		LOG.trace(marker, message, p0, p1, p2, p3, p4);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5) {
		LOG.trace(marker, message, p0, p1, p2, p3, p4, p5);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.trace(marker, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.trace(marker, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8) {
		LOG.trace(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void trace(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8, Object p9) {
		LOG.trace(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void trace(String message, Object p0) {
		LOG.trace(message, p0);
	}

	public static void trace(String message, Object p0, Object p1) {
		LOG.trace(message, p0, p1);
	}

	public static void trace(String message, Object p0, Object p1, Object p2) {
		LOG.trace(message, p0, p1, p2);
	}

	public static void trace(String message, Object p0, Object p1, Object p2,
			Object p3) {
		LOG.trace(message, p0, p1, p2, p3);
	}

	public static void trace(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4) {
		LOG.trace(message, p0, p1, p2, p3, p4);
	}

	public static void trace(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5) {
		LOG.trace(message, p0, p1, p2, p3, p4, p5);
	}

	public static void trace(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6) {
		LOG.trace(message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void trace(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.trace(message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void trace(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8) {
		LOG.trace(message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void trace(String message, Object p0, Object p1, Object p2,
			Object p3, Object p4, Object p5, Object p6, Object p7, Object p8,
			Object p9) {
		LOG.trace(message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static EntryMessage traceEntry() {
		return LOG.traceEntry();
	}

	public static EntryMessage traceEntry(String format, Object... params) {
		return LOG.traceEntry(format, params);
	}

	public static EntryMessage traceEntry(Supplier<?>... paramSuppliers) {
		return LOG.traceEntry(paramSuppliers);
	}

	public static EntryMessage traceEntry(String format,
			Supplier<?>... paramSuppliers) {
		return LOG.traceEntry(format, paramSuppliers);
	}

	public static EntryMessage traceEntry(Message message) {
		return LOG.traceEntry(message);
	}

	public static void traceExit() {
		LOG.traceExit();
	}

	public static <R> R traceExit(R result) {
		return LOG.traceExit(result);
	}

	public static <R> R traceExit(String format, R result) {
		return LOG.traceExit(format, result);
	}

	public static void traceExit(EntryMessage message) {
		LOG.traceExit(message);
	}

	public static <R> R traceExit(EntryMessage message, R result) {
		return LOG.traceExit(message, result);
	}

	public static <R> R traceExit(Message message, R result) {
		return LOG.traceExit(message, result);
	}

	public static void warn(Marker marker, Message msg) {
		LOG.warn(marker, msg);
	}

	public static void warn(Marker marker, Message msg, Throwable t) {
		LOG.warn(marker, msg, t);
	}

	public static void warn(Marker marker, MessageSupplier msgSupplier) {
		LOG.warn(marker, msgSupplier);
	}

	public static void warn(Marker marker, MessageSupplier msgSupplier, Throwable t) {
		LOG.warn(marker, msgSupplier, t);
	}

	public static void warn(Marker marker, CharSequence message) {
		LOG.warn(marker, message);
	}

	public static void warn(Marker marker, CharSequence message, Throwable t) {
		LOG.warn(marker, message, t);
	}

	public static void warn(Marker marker, Object message) {
		LOG.warn(marker, message);
	}

	public static void warn(Marker marker, Object message, Throwable t) {
		LOG.warn(marker, message, t);
	}

	public static void warn(Marker marker, String message) {
		LOG.warn(marker, message);
	}

	public static void warn(Marker marker, String message, Object... params) {
		LOG.warn(marker, message, params);
	}

	public static void warn(Marker marker, String message,
			Supplier<?>... paramSuppliers) {
		LOG.warn(marker, message, paramSuppliers);
	}

	public static void warn(Marker marker, String message, Throwable t) {
		LOG.warn(marker, message, t);
	}

	public static void warn(Marker marker, Supplier<?> msgSupplier) {
		LOG.warn(marker, msgSupplier);
	}

	public static void warn(Marker marker, Supplier<?> msgSupplier, Throwable t) {
		LOG.warn(marker, msgSupplier, t);
	}

	public static void warn(Message msg) {
		LOG.warn(msg);
	}

	public static void warn(Message msg, Throwable t) {
		LOG.warn(msg, t);
	}

	public static void warn(MessageSupplier msgSupplier) {
		LOG.warn(msgSupplier);
	}

	public static void warn(MessageSupplier msgSupplier, Throwable t) {
		LOG.warn(msgSupplier, t);
	}

	public static void warn(CharSequence message) {
		LOG.warn(message);
	}

	public static void warn(CharSequence message, Throwable t) {
		LOG.warn(message, t);
	}

	public static void warn(Object message) {
		LOG.warn(message);
	}

	public static void warn(Object message, Throwable t) {
		LOG.warn(message, t);
	}

	public static void warn(String message) {
		LOG.warn(message);
	}

	public static void warn(String message, Object... params) {
		LOG.warn(message, params);
	}

	public static void warn(String message, Supplier<?>... paramSuppliers) {
		LOG.warn(message, paramSuppliers);
	}

	public static void warn(String message, Throwable t) {
		LOG.warn(message, t);
	}

	public static void warn(Supplier<?> msgSupplier) {
		LOG.warn(msgSupplier);
	}

	public static void warn(Supplier<?> msgSupplier, Throwable t) {
		LOG.warn(msgSupplier, t);
	}

	public static void warn(Marker marker, String message, Object p0) {
		LOG.warn(marker, message, p0);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1) {
		LOG.warn(marker, message, p0, p1);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2) {
		LOG.warn(marker, message, p0, p1, p2);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3) {
		LOG.warn(marker, message, p0, p1, p2, p3);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4) {
		LOG.warn(marker, message, p0, p1, p2, p3, p4);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5) {
		LOG.warn(marker, message, p0, p1, p2, p3, p4, p5);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6) {
		LOG.warn(marker, message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7) {
		LOG.warn(marker, message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8) {
		LOG.warn(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void warn(Marker marker, String message, Object p0, Object p1,
			Object p2, Object p3, Object p4, Object p5, Object p6, Object p7,
			Object p8, Object p9) {
		LOG.warn(marker, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	public static void warn(String message, Object p0) {
		LOG.warn(message, p0);
	}

	public static void warn(String message, Object p0, Object p1) {
		LOG.warn(message, p0, p1);
	}

	public static void warn(String message, Object p0, Object p1, Object p2) {
		LOG.warn(message, p0, p1, p2);
	}

	public static void warn(String message, Object p0, Object p1, Object p2,
			Object p3) {
		LOG.warn(message, p0, p1, p2, p3);
	}

	public static void warn(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4) {
		LOG.warn(message, p0, p1, p2, p3, p4);
	}

	public static void warn(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5) {
		LOG.warn(message, p0, p1, p2, p3, p4, p5);
	}

	public static void warn(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6) {
		LOG.warn(message, p0, p1, p2, p3, p4, p5, p6);
	}

	public static void warn(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6, Object p7) {
		LOG.warn(message, p0, p1, p2, p3, p4, p5, p6, p7);
	}

	public static void warn(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6, Object p7, Object p8) {
		LOG.warn(message, p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	public static void warn(String message, Object p0, Object p1, Object p2, Object p3,
			Object p4, Object p5, Object p6, Object p7, Object p8, Object p9) {
		LOG.warn(message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}
	
}
